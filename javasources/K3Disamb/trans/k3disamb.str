module k3disamb

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/K3Disamb
  lib/editor-common.generated
  lib/analysis-auto.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/compilation-library.generated
  analysis-manual
  check
  starter

rules // Main editor interface (defined by editor/K3Disamb-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      ast'     := <id>;
      errors   := <collect-all(constraint-error, conc)> ast';
      warnings := <collect-all(constraint-warning, conc)> ast';
      notes    := <collect-all(constraint-note, conc)> ast'
  
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
      
  // Prints the analyzed abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <id> (selected, path, project-path)
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      language  := <id> ast;
      index-setup(|language, [project-path], $[[project-path]/[path]]);
      target    := <index-lookup> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      ast'              := <id> (ast, path, project-path);
      x                 := <collect-one(?COMPLETION(_))> ast';
      COMPLETION(name)  := x;
      (
        proposals       := <index-lookup-all-levels(|name)> x
      <+ 
        proposals       := []
      );
      proposals'        := <map(def-to-name)> proposals

  def-to-name:
    Def([namespace, name | _]) -> name
