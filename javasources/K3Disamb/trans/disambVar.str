module disambVar

imports
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	libstratego-sglr

	include/K3Disamb

	disamb
	disambEmph
	disambCells
	disambSup

strategies

// Version two - correct the variables infered at the previous step of local type inference

	var-type-inference2 =
		?a ;
		where(
			vars := <collect-all(matchVar)> a ;
			vars2 := <groupVars2> vars
		) ;
		emphasizeVars3(|vars2)

	matchVar =
		?a#(b) ;
		where(<string-ends-with(|"Var")> a) ;
		where(not(!b => ["_"]))


	groupVars2:
		x -> <flatten-list> [<infimum> myas, <groupVars2> mybs]
		where not(!x => [])
		where <?[_#(name) | b]> x
		where myas := <collect-all(?_#(name))> x
		where  mybs := <collect-all(
					{a1, a2 : where(?a1#(a2) ; <string-ends-with(|"Var")> a1 ; not(<?name> a2))}
				)> x

	groupVars2:
		[] -> []

	infimum:
		x -> rez2
		where rez := <isectSorts2> x
		where rez2 := <if <lt>(<length> rez, 2) then  !<last> rez else !amb(rez) end>


	emphasizeVars3(|varDefs) =
		topdown(try(emphasizeVars4(|varDefs)))

	emphasizeVars4(|varDefs):
		x#(y) -> xx#(y)		// not sure why, but it only works if I use visibility scopes for variables
		where <string-ends-with(|"Var")> x
		where {x' : <one({x' : ?x'#(y) ; xx := x'})> varDefs }



