
regular tree grammar
  start StartDz
  productions
    ListStarOfCellProperty0 -> ListPlusOfCellProperty0
    ListStarOfCellProperty0 -> <nil>()
    ListStarOfCellProperty0 -> <conc>(ListStarOfCellProperty0,ListStarOfCellProperty0)
    ListPlusOfCellProperty0 -> <conc>(ListStarOfCellProperty0,ListPlusOfCellProperty0)
    ListPlusOfCellProperty0 -> <conc>(ListPlusOfCellProperty0,ListStarOfCellProperty0)
    ListPlusOfCellProperty0 -> <conc>(ListPlusOfCellProperty0,ListPlusOfCellProperty0)
    ListPlusOfCellProperty0 -> <cons>(CellProperty,ListStarOfCellProperty0)
    ListStarOfKSentence0    -> ListPlusOfKSentence0
    ListStarOfKSentence0    -> <nil>()
    ListStarOfKSentence0    -> <conc>(ListStarOfKSentence0,ListStarOfKSentence0)
    ListPlusOfKSentence0    -> <conc>(ListStarOfKSentence0,ListPlusOfKSentence0)
    ListPlusOfKSentence0    -> <conc>(ListPlusOfKSentence0,ListStarOfKSentence0)
    ListPlusOfKSentence0    -> <conc>(ListPlusOfKSentence0,ListPlusOfKSentence0)
    ListPlusOfKSentence0    -> <cons>(KSentence,ListStarOfKSentence0)
    ListStarOfTC0           -> <string>
    ListPlusOfTC0           -> <string>
    ListStarOfTAG0          -> <string>
    ListPlusOfTAG0          -> <string>
    ListStarOfKLabelChar0   -> <string>
    ListPlusOfKLabelChar0   -> <string>
    ListStarOfStringChar0   -> <string>
    ListPlusOfStringChar0   -> <string>
    OptExponentPart0        -> <string>
    OptLit0                 -> <string>
    Map                     -> Map1List(Map,Map)
    MapItem                 -> MapItem1LKLKItem(ListDlKDr,ListDlKDr)
    MapItem                 -> MapItem1KKItem(K,K)
    Map                     -> MapItem
    Map                     -> Map1Empty()
    Map                     -> Map1Rewrite(Map,Map)
    Map                     -> Map12Empty()
    Set                     -> Set1List(Set,Set)
    Set                     -> SetItem
    SetItem                 -> SetItem1SIKItem(K)
    Set                     -> Set1Empty()
    Set                     -> Set1Rewrite(Set,Set)
    Set                     -> Set12Empty()
    Bag                     -> Bag1List(Bag,Bag)
    BagItem                 -> BagItem1BIKItem(K)
    Bag                     -> BagItem
    Bag                     -> Bag1Empty()
    Bag                     -> Bag1Rewrite(Bag,Bag)
    Bag                     -> Bag12Empty()
    List                    -> List1List(List,List)
    List                    -> ListItem
    ListItem                -> ListItem1LIKItem(K)
    List                    -> List1Empty()
    List                    -> List1Rewrite(List,List)
    List                    -> List12Empty()
    ListDlKDr               -> ListDlKDr1List(ListDlKDr,ListDlKDr)
    ListDlKDr               -> ListDlKDr12Empty()
    K                       -> K1Seq(K,K)
    K                       -> K1Empty()
    K                       -> K12Empty()
    ListDlKDr               -> ListDlKDr1Rewrite(ListDlKDr,ListDlKDr)
    K                       -> K1Rewrite(K,K)
    LABEL                   -> <string>
    ModName                 -> <string>
    CellLabel               -> <string>
    DzCellLabel             -> <string>
    BASICID                 -> <string>
    Tag                     -> TagParam(KEY,DzDzSTRING)
    Tag                     -> TagParam(KEY,TAGCONTENT)
    Tag                     -> Tag(KEY)
    TagList                 -> TagList(TagList,TagList)
    TagList                 -> Tag
    TagList                 -> NoTags()
    Label                   -> Label(LABEL)
    Label                   -> NoLabel()
    CellLabel               -> CellLabelRewrite(CellLabel,CellLabel)
    CellProperty            -> CellProperty(DzDzID,DzDzSTRING)
    CellContents            -> List
    CellContents            -> Set
    CellContents            -> Bag
    CellContents            -> Map
    CellContents            -> K
    B                       -> CellContents
    B                       -> RightCell(CellContents)
    A                       -> B
    A                       -> LeftCell(B)
    BagItem                 -> Bag1ClosedCell(CellLabel,ListStarOfCellProperty0,A,CellLabel)
    KSentence               -> KSimpleSentence
    KSentence               -> AttributedSentence(KSimpleSentence,TagList)
    KSentence               -> CondSentence(KSimpleSentence,K)
    KSentence               -> AttributedCondSentence(KSimpleSentence,K,TagList)
    KSimpleSentence         -> Context(K)
    KSimpleSentence         -> Map1Rule(Label,Map)
    KSimpleSentence         -> Set1Rule(Label,Set)
    KSimpleSentence         -> ListDlKDr1Rule(Label,ListDlKDr)
    KSimpleSentence         -> Bag1Rule(Label,Bag)
    KSimpleSentence         -> List1Rule(Label,List)
    KSentence               -> Config(Bag)
    StartDz                 -> KSentenceList(ListPlusOfKSentence0)
    TC                      -> <string>
    TAGCONTENT              -> <string>
    KEY                     -> <string>
    TAG                     -> <string>
    KLabel                  -> KLabel1Var(VARID)
    KLabel                  -> KLabel12Var(VARID)
    ListDlKDr               -> ListDlKDr1Var(VARID)
    ListDlKDr               -> ListDlKDr12Var(VARID)
    K                       -> K1Var(VARID)
    K                       -> K12Var(VARID)
    Map                     -> MapItem12Var(VARID)
    Map                     -> Map1Var(VARID)
    Map                     -> Map12Var(VARID)
    Bag                     -> BagItem12Var(VARID)
    Bag                     -> Bag1Var(VARID)
    Bag                     -> Bag12Var(VARID)
    Set                     -> SetItem12Var(VARID)
    Set                     -> Set1Var(VARID)
    Set                     -> Set12Var(VARID)
    List                    -> ListItem12Var(VARID)
    List                    -> List1Var(VARID)
    List                    -> List12Var(VARID)
    K                       -> K12Hole()
    K                       -> K1Hole()
    ListDlKDr               -> K
    K                       -> K1App(KLabel,ListDlKDr)
    KLabel                  -> KLabel1Rewrite(KLabel,KLabel)
    KLabel                  -> KLabel1Const(DzKLabel)
    BackQuote               -> <string>
    KLabelChar              -> <string>
    DzKLabel                -> <string>
    BackSlashChar           -> <string>
    StringChar              -> <string>
    DzDzSTRING              -> <string>
    ExponentPart            -> <string>
    FloatDigits             -> <string>
    DzDzFLOAT               -> <string>
    DzDzINT                 -> <string>
    DzDzID                  -> <string>
    DzDzBOOL                -> <string>
    VARID                   -> <string>
    EOF                     -> <string>
    CommentChar             -> <string>
