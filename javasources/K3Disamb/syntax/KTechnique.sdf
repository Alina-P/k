%% Grammar for the K language
module KTechnique
imports Common %% For Comments and whitespace
imports KBuiltinsBasic

exports
context-free priorities
{
	".K"		-> K {cons("K12Empty"), prefer}
	"."			-> K {cons("K1Empty")}
	K "~>" K	-> K {left, cons("K1Seq")}
	".List{K}"	-> ListDlKDr {cons("ListDlKDr12Empty")}
	ListDlKDr   ",," ListDlKDr	-> ListDlKDr {left, cons("ListDlKDr1List")}
	KLabel "(" ListDlKDr ")"	-> K {cons("K1App")}
} > { non-assoc:
	K "=>" K	-> K {non-assoc, cons("K1Rewrite")}
	ListDlKDr  "=>" ListDlKDr	-> ListDlKDr {non-assoc, cons("ListDlKDr1Rewrite")}
}
context-free syntax
	K					-> ListDlKDr %%{cons("ListOfK3K")}
	"HOLE"				-> K {cons("K1Hole")}
	"HOLE" ":" "K"		-> K {cons("K12Hole")}
	"(" ListDlKDr ")"	-> ListDlKDr {bracket}
	"(" K ")"			-> K {bracket}
	KLabel "=>" KLabel	-> KLabel {cons("KLabel1Rewrite")}

context-free priorities
{
	".List"					-> List {cons("List12Empty"), prefer}
	"."						-> List {cons("List1Empty")}
	"ListItem" "(" K ")"	-> ListItem {cons("ListItem1LIKItem")}
	ListItem				-> List
	List List				-> List {left, cons("List1List")}
} > {
	List "=>" List			-> List {non-assoc, cons("List1Rewrite")}
}
context-free syntax
	"(" List ")"			-> List {bracket}

context-free priorities
{
	".Bag"				-> Bag {cons("Bag12Empty"), prefer}
	"."					-> Bag {cons("Bag1Empty")}
	BagItem				-> Bag
	"BagItem" "(" K ")" -> BagItem {cons("BagItem1BIKItem")}
	%%BagItem+			-> Bag {cons("BagList")}
	Bag Bag				-> Bag {left, cons("Bag1List")}
} > {
	Bag "=>" Bag		-> Bag {non-assoc, cons("Bag1Rewrite")}
}
context-free syntax
	%%"(" BagItem ")"	-> BagItem {bracket}
	"(" Bag ")"			-> Bag {bracket}

context-free priorities
{
	".Set"				-> Set {cons("Set12Empty"), prefer}
	"."					-> Set {cons("Set1Empty")}
	"SetItem" "(" K ")" -> SetItem {cons("SetItem1SIKItem")}
	%%SetItem+			-> Set {cons("SetList")}
	SetItem				-> Set %%{cons("Set3SetItem")}
	Set Set				-> Set {left, cons("Set1List")}
} > {
	Set "=>" Set		-> Set {non-assoc, cons("Set1Rewrite")}
}
context-free syntax
	%%"(" SetItem ")"		-> SetItem {bracket}
	"(" Set ")"				-> Set {bracket}

context-free priorities
{
	".Map"			-> Map {cons("Map12Empty"), prefer}
	"."				-> Map {cons("Map1Empty")}
	MapItem			-> Map %%{cons("Map3MapItem")}  %% Does SDF supports subsorting closure? I believe it generates ambiguities
	"MapItem" "(" K "," K ")"	-> MapItem {cons("MapItem1KKItem")}
	ListDlKDr "|->" ListDlKDr	-> MapItem {cons("MapItem1LKLKItem")}
	%%K "|->" K					-> MapItem {cons("MapItem1MapsTo")}
	Map   Map				-> Map {left, cons("Map1List")}
	%%Map "[" K "/" K "]"		-> Map {cons("Map1MapReplaceK")}
} > {
	Map "=>" Map			-> Map {non-assoc, cons("Map1Rewrite")}
}
context-free syntax
	%%"(" MapItem ")"		-> MapItem {bracket}
	"(" Map ")"				-> Map {bracket}

context-free syntax
	%% TODO: Variables Dunno what to do with the variables
	%% VarId ":" Type		-> Variable {cons("TypedVar")}
	VARID ":" "List"		-> List {cons("List12Var")}
	VARID					-> List {cons("List1Var")}
	VARID ":" "ListItem"	-> List {cons("ListItem12Var")}
	VARID					-> List {cons("ListItem1Var")}
	VARID ":" "Set"			-> Set {cons("Set12Var")}
	VARID					-> Set {cons("Set1Var")}
	VARID ":" "SetItem"		-> Set {cons("SetItem12Var")}
	VARID					-> Set {cons("SetItem1Var")}
	VARID ":" "Bag"			-> Bag {cons("Bag12Var")}
	VARID					-> Bag {cons("Bag1Var")}
	VARID ":" "BagItem"		-> Bag {cons("BagItem12Var")}
	VARID					-> Bag {cons("BagItem1Var")}
	VARID ":" "Map"			-> Map {cons("Map12Var")}
	VARID					-> Map {cons("Map1Var")}
	VARID ":" "MapItem"		-> Map {cons("MapItem12Var")}
	VARID					-> Map {cons("MapItem1Var")}
	VARID ":" "K"			-> K {cons("K12Var")}
	VARID					-> K {cons("K1Var")}
	VARID ":" "List{K}"		-> ListDlKDr {cons("ListDlKDr12Var")}
	VARID					-> ListDlKDr {cons("ListDlKDr1Var")}
	VARID ":" "KLabel"		-> KLabel {cons("KLabel12Var")}
	VARID					-> KLabel {cons("KLabel1Var")}

lexical syntax
	%% rejects
	%%"K"			-> ID {reject}
	%%"List"		-> ID {reject}
	"ListItem"		-> VARID {reject}
	%%"Bag"			-> ID {reject}
	"BagItem"		-> VARID {reject}
	%%"Set"			-> ID {reject}
	"SetItem"		-> VARID {reject}
	%%"Map"			-> ID {reject}
	"MapItem"		-> VARID {reject}
	%%"keys"			-> ID {reject}
	%%"hasMapping"	-> ID {reject}

lexical restrictions
	".List"		-/- [a-zA-Z0-9\{\}]
	".ListItem"	-/- [a-zA-Z0-9]
	".Map"		-/- [a-zA-Z0-9]
	".MapItem"	-/- [a-zA-Z0-9]
	".Set"		-/- [a-zA-Z0-9]
	".SetItem"	-/- [a-zA-Z0-9]
	".Bag"		-/- [a-zA-Z0-9]
	".BagItem"	-/- [a-zA-Z0-9]
	".K"		-/- [a-zA-Z0-9]
	".List{K}"	-/- [a-zA-Z0-9]

	"List"		-/- [a-zA-Z0-9]
	"ListItem"	-/- [a-zA-Z0-9]
	"Map"		-/- [a-zA-Z0-9]
	"MapItem"	-/- [a-zA-Z0-9]
	"Set"		-/- [a-zA-Z0-9]
	"SetItem"	-/- [a-zA-Z0-9]
	"Bag"		-/- [a-zA-Z0-9]
	"BagItem"	-/- [a-zA-Z0-9]
	"K"			-/- [a-zA-Z0-9]
	"List{K}"	-/- [a-zA-Z0-9]
	"."			-/- [a-zA-Z0-9\.]

