module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

exports

context-free priorities
{
	"notBool" K -> K {left, cons("Bool10Syn")}
} > {
	K "andBool" K -> K {left, cons("Bool12Syn")}
} > {
	K "xorBool" K -> K {left, cons("Bool13Syn")}
} > {
	K "orBool" K -> K {left, cons("Bool14Syn")}
} > {
	K "impliesBool" K -> K {left, cons("Bool15Syn")}
} > { left:
	K "==Bool" K -> K {left, cons("Bool16Syn")}
	K "=/=Bool" K -> K {left, cons("Bool17Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{ left:
	K "*Int" K -> K {left, cons("Int19Syn")}
	K "/Int" K -> K {left, cons("Int120Syn")}
	K "%Int" K -> K {left, cons("Int122Syn")}
} > { left:
	K "+Int" K -> K {left, cons("Int123Syn")}
	K "-Int" K -> K {left, cons("Int124Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "<=Int" K -> K {left, cons("Bool125Syn")}
	K "<Int" K -> K {left, cons("Bool126Syn")}
	K ">=Int" K -> K {left, cons("Bool127Syn")}
	K ">Int" K -> K {left, cons("Bool128Syn")}
	K "==Int" K -> K {left, cons("Bool129Syn")}
	K "=/=Int" K -> K {left, cons("Bool130Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "dividesInt" K -> K {cons("Bool133Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{ left:
	K "*Float" K -> K {left, cons("Float134Syn")}
	K "/Float" K -> K {left, cons("Float135Syn")}
	K "%Float" K -> K {left, cons("Float136Syn")}
} > { left:
	K "+Float" K -> K {left, cons("Float137Syn")}
	K "-Float" K -> K {left, cons("Float138Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{ left:
	K "<=Float" K -> K {left, cons("Bool139Syn")}
	K "<Float" K -> K {left, cons("Bool140Syn")}
	K ">=Float" K -> K {left, cons("Bool142Syn")}
	K ">Float" K -> K {left, cons("Bool143Syn")}
	K "==Float" K -> K {left, cons("Bool144Syn")}
	K "=/=Float" K -> K {left, cons("Bool145Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "+String" K -> K {cons("String148Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "==String" K -> K {cons("Bool149Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "=/=String" K -> K {cons("Bool162Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "==K" K -> K {cons("Bool166Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "=/=K" K -> K {cons("Bool167Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	Set "<=Set" Set -> K {cons("Bool169Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	Set "==Set" Set -> K {cons("Bool170Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	Set "=/=Set" Set -> K {cons("Bool172Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	ListDlKDr "==List{K}" ListDlKDr -> K {cons("Bool173Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	ListDlKDr "=/=List{K}" ListDlKDr -> K {cons("Bool174Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	KLabel "==KLabel" KLabel -> K {cons("Bool175Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "/" K -> K {left, cons("AExp184Syn")}
} > {
	K "+" K -> K {left, cons("AExp185Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "<=" K -> K {cons("BExp186Syn")}
	"not" K -> K {cons("BExp187Syn")}
} > {
	K "and" K -> K {left, cons("BExp188Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K ":=" K -> K {cons("Stmt190Syn")}
	"if" InsertDzK "then" InsertDzK "else" K -> K {cons("Stmt192Syn")}
	"while" InsertDzK "do" K -> K {cons("Stmt193Syn")}
} > {
	K ";" K -> K {left, cons("Stmt194Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	"var" InsertDzK ";" K -> K {cons("Pgm195Syn")}
} > {
	K "~>" K -> K
}

context-free priorities
{
	K "," K -> K {right, cons("Ids1ListSyn")}
} > {
	K "~>" K -> K
}

context-free syntax
	K -> InsertDzK
	"'#andBool" -> KLabel {cons("KLabel18Syn")}
	"isNat" "(" K ")" -> K {cons("Bool132Syn")}
	"Int2Float" "(" K ")" -> K {cons("Float146Syn")}
	"Float2Int" "(" K ")" -> K {cons("Int147Syn")}
	"lengthString" "(" K ")" -> K {cons("Int150Syn")}
	"charString" "(" K ")" -> K {cons("String152Syn")}
	"asciiString" "(" K ")" -> K {cons("Int153Syn")}
	"substrString" "(" K "," K "," K ")" -> K {cons("String154Syn")}
	"Float2String" "(" K ")" -> K {cons("String155Syn")}
	"String2Float" "(" K ")" -> K {cons("Float156Syn")}
	"String2Int" "(" K ")" -> K {cons("Int157Syn")}
	"Int2String" "(" K ")" -> K {cons("String158Syn")}
	"Id2String" "(" K ")" -> K {cons("String159Syn")}
	"String2Id" "(" K ")" -> K {cons("Id160Syn")}
	"isChar" "(" K ")" -> K {cons("Bool163Syn")}
	"#isWhiteSpace" "(" K ")" -> K {cons("Bool164Syn")}
	"#isDigit" "(" K ")" -> K {cons("Bool165Syn")}
	"#if" K "#then" K "#else" K "#fi" -> K {cons("K168Syn")}
	"#EOF" -> K {cons("TCPAnswer176Syn")}
	"#tcpError" "(" K ")" -> K {cons("TCPAnswer177Syn")}
	"#tcpRequest" "(" K ")" -> K {cons("TCPAnswer178Syn")}
	"#checkTCPAnswer" "(" K ")" -> K {cons("TCPAnswer179Syn")}
	"##tcpRequest" "(" K ")" -> K {cons("String180Syn")}
	"#retrieveTCPError" "(" K ")" -> K {cons("String182Syn")}
	"#isTCPError" "(" K ")" -> K {cons("Bool183Syn")}
	"skip" -> K {cons("Stmt189Syn")}
	".Ids" -> K {cons("Ids1Empty")}


	VARID  ":" "Float"        -> K            {cons("Float12Var")}
	VARID  ":" "Bool"        -> K            {cons("Bool12Var")}
	VARID  ":" "Start"        -> K            {cons("Start12Var")}
	VARID  ":" "Pgm"        -> K            {cons("Pgm12Var")}
	VARID  ":" "#Id"        -> K            {cons("DzId12Var")}
	VARID  ":" "Char"        -> K            {cons("Char12Var")}
	VARID  ":" "KResult"        -> K            {cons("KResult12Var")}
	VARID  ":" "TCPAnswer"        -> K            {cons("TCPAnswer12Var")}
	VARID  ":" "#Float"        -> K            {cons("DzFloat12Var")}
	VARID  ":" "#String"        -> K            {cons("DzString12Var")}
	VARID  ":" "#Int"        -> K            {cons("DzInt12Var")}
	VARID  ":" "BExp"        -> K            {cons("BExp12Var")}
	VARID  ":" "AExp"        -> K            {cons("AExp12Var")}
	VARID  ":" "String"        -> K            {cons("String12Var")}
	VARID  ":" "Stmt"        -> K            {cons("Stmt12Var")}
	VARID  ":" "Id"        -> K            {cons("Id12Var")}
	VARID  ":" "Ids"        -> K            {cons("Ids12Var")}
	VARID  ":" "Int"        -> K            {cons("Int12Var")}
	VARID  ":" "#Bool"        -> K            {cons("DzBool12Var")}

	"HOLE" ":" "Float"      -> K            {cons("Float12Hole")}
	"HOLE" ":" "Bool"      -> K            {cons("Bool12Hole")}
	"HOLE" ":" "Start"      -> K            {cons("Start12Hole")}
	"HOLE" ":" "Pgm"      -> K            {cons("Pgm12Hole")}
	"HOLE" ":" "#Id"      -> K            {cons("DzId12Hole")}
	"HOLE" ":" "Char"      -> K            {cons("Char12Hole")}
	"HOLE" ":" "KResult"      -> K            {cons("KResult12Hole")}
	"HOLE" ":" "TCPAnswer"      -> K            {cons("TCPAnswer12Hole")}
	"HOLE" ":" "#Float"      -> K            {cons("DzFloat12Hole")}
	"HOLE" ":" "#String"      -> K            {cons("DzString12Hole")}
	"HOLE" ":" "#Int"      -> K            {cons("DzInt12Hole")}
	"HOLE" ":" "BExp"      -> K            {cons("BExp12Hole")}
	"HOLE" ":" "AExp"      -> K            {cons("AExp12Hole")}
	"HOLE" ":" "String"      -> K            {cons("String12Hole")}
	"HOLE" ":" "Stmt"      -> K            {cons("Stmt12Hole")}
	"HOLE" ":" "Id"      -> K            {cons("Id12Hole")}
	"HOLE" ":" "Ids"      -> K            {cons("Ids12Hole")}
	"HOLE" ":" "Int"      -> K            {cons("Int12Hole")}
	"HOLE" ":" "#Bool"      -> K            {cons("DzBool12Hole")}


	DzInt		-> K
	DzBool		-> K
	DzId		-> K
	DzString	-> K

	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzBool	-> DzBool	{cons("DzBool1Const")}
	DzDzId		-> DzId		{cons("DzId1Const")}
	DzDzString	-> DzString	{cons("DzString1Const")}

	DzDzINT		-> DzDzInt
	DzDzBOOL	-> DzDzBool
	DzDzSTRING	-> DzDzString

lexical syntax
lexical restrictions
	"<=" -/- [I].[n].[t]
	"/" -/- [I].[n].[t]
	"<=" -/- [S].[e].[t]
	"and" -/- [B].[o].[o].[l]
	"/" -/- [F].[l].[o].[a].[t]
	"+" -/- [I].[n].[t]
	"+" -/- [S].[t].[r].[i].[n].[g]
	"+" -/- [F].[l].[o].[a].[t]
	"==K" -/- [L].[a].[b].[e].[l]
	"not" -/- [B].[o].[o].[l]
	"<=" -/- [F].[l].[o].[a].[t]

