%% Grammar for the K language
module Basic
imports Common %% For Comments and whitespace

exports
context-free start-symbols
	Start

context-free syntax
	Require* KModule*	-> Start {cons("KModuleList")}
	"require" STRING	-> Require {cons("Require")}

	%% K Module syntax
	"module"    MODNAME KModHeaderItem* KSentence* "endmodule"    -> KModule {cons("KModule")}
	"interface" MODNAME KModHeaderItem* KSentence* "endinterface" -> KModule {cons("KInterface")}
	"imports"   MODNAME	-> KModHeaderItem {cons("Imports")}

	%% K Sentences
	"configuration"		HIDDEN+	-> KSentence {cons("Config")}
	"rule"				HIDDEN+	-> KSentence {cons("Rule")}
	"context"			HIDDEN+	-> KSentence {cons("Context")}

	"syntax" SORTID "::=" {Prod1 ">"}+	-> KSentence {cons("Syntax")}

	"syntax" "priorities"	{KLList ">"}+	-> KSentence {cons("Priority")}
	"syntax" "priority"		{KLList ">"}+	-> KSentence {cons("Priority")}
	"syntax" "left"			KLABEL+			-> KSentence {cons("PriorityLeft")}
	"syntax" "right"		KLABEL+			-> KSentence {cons("PriorityRight")}
	"syntax" "non-assoc"	KLABEL+			-> KSentence {cons("PriorityNonAssoc")}
	"syntax" BasicElement "-/-" Follow 		-> KSentence {cons("Restrictions")}

	KLABEL+	-> KLList {cons("PriorityBlock")}
	HIDDEN	-> KLABEL {cons("KLabel")}
	">"		-> KLABEL {reject}

context-free restrictions
	KLABEL			-/- ~[\t\n\r\ ]
	"left:"			-/- ~[\t\n\r\ ]
	"right:"		-/- ~[\t\n\r\ ]
	"non-assoc:"	-/- ~[\t\n\r\ ]

context-free syntax
	"left:" {Prod2 "|"}+ -> Prod1 {cons("LeftOrList")}
	"right:" {Prod2 "|"}+ -> Prod1 {cons("RightOrList")}
	"non-assoc:" {Prod2 "|"}+ -> Prod1 {cons("NonAssocOrList")}
	{Prod2 "|"}+ -> Prod1 {cons("OrList")}

	FUNCTIONID "(" {SORTID ","}+ ")"	-> Prod2 {cons("ShortProd")}
	FUNCTIONID "(" {SORTID ","}+ ")"	"[" {Tag ","}+ "]" -> Prod2 {cons("ShortAnnoProd")}

	   "(" {SORTID ","}+ ")"	-> Prod2 {cons("TupleProd")}
	   "(" {SORTID ","}+ ")"	"[" {Tag ","}+ "]" -> Prod2 {cons("TupleAnnoProd")}

	SyntaxElement+	-> Prod2 {cons("Prod")}
	SyntaxElement+	"[" {Tag ","}+ "]" -> Prod2 {cons("AnnoProd")}
	BasicElement -> SyntaxElement
	STRING		-> BasicElement {cons("Terminal")}
	SORTID		-> BasicElement {cons("Sort")}
	"List{" BASICID "," STRING "}" -> SyntaxElement {cons("List")}
	"Lexer" "{" RegEx "}" -> SyntaxElement {cons("Lexer")}
	"Token" "{" RegEx "}" -> SyntaxElement {cons("Token")}

	%%COMPOSEDID	-> NonTerminal {cons("SyntaxCID")}

	KEY							-> Tag {cons("Tag")}
	KEY "(" TAGCONTENT ")"		-> Tag {cons("TagParam")}
	KEY "(" STRING ")"			-> Tag {cons("TagString")}


lexical syntax
	[A-Za-z\-0-9]			-> TAG
	[a-z] TAG+				-> KEY
	TC*						-> TAGCONTENT
	~[\n\r\(\)\"]			-> TC
	"(" TAGCONTENT ")"		-> TC

lexical restrictions
	TAGCONTENT	-/- ~[\(\)]
	KEY			-/- [A-Za-z\-0-9]
	"syntax"	-/- ~[\n\r\ \t]
	"rule"		-/- ~[\n\r\ \t]
	"context"	-/- ~[\n\r\ \t]
	"imports"	-/- ~[\n\r\ \t]
	"configuration"	-/- ~[\n\r\ \t]


lexical syntax
	COMPOSEDID	-> SORTID
	BASICID		-> SORTID

	~[\t\n\r\ ]+	-> HIDDEN

	"rule"			-> HIDDEN {reject}
	"syntax"		-> HIDDEN {reject}
	"context"		-> HIDDEN {reject}
	"configuration"	-> HIDDEN {reject}
	"endmodule"		-> HIDDEN {reject}
	"endinterface"	-> HIDDEN {reject}
	"#"?{[a-z0-9A-Z\_]+ "-"}+	-> MODNAME

	%% String declaration
	"\"" StringChar* "\"" -> STRING
	~[\"\\\n]			-> StringChar
	"\\\""				-> StringChar
	"\\n"				-> StringChar
	"\\r"				-> StringChar
	"\\t"				-> StringChar
	"\\\\"				-> StringChar

	"#"?[a-zA-Z][a-zA-Z0-9]*  -> FUNCTIONID
	[a-zA-Z][a-zA-Z0-9]*  -> ID
	"#"?[A-Z][a-zA-Z0-9]* -> BASICID
	[A-Z][a-zA-Z0-9]* "{" "#"?[A-Z][a-zA-Z0-9]* "}" -> COMPOSEDID

	[0-9]+			-> NAT


lexical restrictions
	HIDDEN			-/- ~[\t\n\r\ ]
	KLABEL			-/- ~[\t\n\r\ ]
	MODNAME			-/- [a-z0-9A-Z\-\_]
	BASICID 		-/- [a-zA-Z0-9\{\}]
	ID 				-/- [a-zA-Z0-9\{\}]
	%%COMPOSEDID		-/- [a-zA-Z0-9\{\}]
	NAT				-/- [0-9]


context-free syntax
	Element+		-> RegEx {cons("RegExList")}
	
	STRING			-> Element {cons("String2Element")}
	Element "?"		-> Element {cons("ElementQuestion")}
	Element "+"		-> Element {cons("ElementPlus")}
	Element "*"		-> Element {cons("ElementStar")}
	"(" Element* ")"	-> Element {bracket}
	"{" Element STRING "}" "+"		-> Element {cons("ElementListPlus")}
	"{" Element STRING "}" "*"		-> Element {cons("ElementListStar")}
	ID				-> Element {cons("ID2Element")}
	Group			-> Element {cons("Group2Element")}
	"[" Char* "]"	-> Group {cons("CharGroup")}
	"~" Group		-> Group {cons("TildeGroup")}
	[a-zA-Z0-9]		-> Char {cons("CharCharacters")}
	[\\]~[a-zA-Z\t]	-> Char {cons("CharEscape1")}
	[\\][tnr]		-> Char {cons("CharEscape2")}
	"\\ "			-> Char {cons("CharEscape3")}
	Char "-" Char	-> Char {cons("CharSequence"), non-assoc}
	{Group "."}+	-> Follow {cons("FollowList")}


