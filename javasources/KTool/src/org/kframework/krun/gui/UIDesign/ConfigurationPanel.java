package org.kframework.krun.gui.UIDesign;import java.awt.Color;import java.awt.Dimension;import java.awt.Toolkit;import java.util.HashMap;import javax.swing.JPanel;import javax.swing.JScrollPane;import org.kframework.krun.gui.UIDesign.xmlEditor.XMLEditorKit;public class ConfigurationPanel extends JPanel{	private static final long serialVersionUID = 1L;	private String s ; 	public static ColorPane cp;	public ConfigurationPanel(){}	//public static HashMap<Integer,Shape> collapsedViews = new HashMap<Integer,Shape>();    public static HashMap<String, Integer> collapsedViews = new HashMap<String, Integer>();        public ConfigurationPanel(String s){    	this.s = s;    	init();    }        public void init(String s){    	this.s=s;    	init();    }               public void init(){    	    	this.setBackground(Color.WHITE);    	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();    	    	//ColorPane cp = new ColorPane();    	cp = new ColorPane();    	//WrapEditorKit kit = new WrapEditorKit();    	cp.setEditorKit(new XMLEditorKit());        	//cp.setEditorKit(kit);    	cp.appendANSI(s);    	cp.setPreferredSize(new Dimension(screenSize.width/3 - 50, screenSize.height - 150));    	//cp.setLocation(20, 20);    	this.removeAll();        this.setVisible(false);        this.setVisible(true);           final JScrollPane thePane = new JScrollPane(cp);        //thePane.setPreferredSize(new Dimension(screenSize.width, screenSize.height-150));       // thePane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);       // thePane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);        javax.swing.SwingUtilities.invokeLater(new Runnable() {        	   public void run() {         	       thePane.getVerticalScrollBar().setValue(0);        	       thePane.getHorizontalScrollBar().setValue(0);        	   }        	});        this.add(thePane);        //tgetContentPane().add(thePane);        //this.add(cp);        this.revalidate();        this.repaint();    } 	   }