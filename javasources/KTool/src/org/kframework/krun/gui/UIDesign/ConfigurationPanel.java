package org.kframework.krun.gui.UIDesign;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.util.HashMap;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextPane;import org.kframework.compile.transformers.AddEmptyLists;import org.kframework.compile.transformers.FlattenSyntax;import org.kframework.compile.transformers.RemoveBrackets;import org.kframework.compile.transformers.RemoveSyntacticCasts;import org.kframework.kil.ASTNode;import org.kframework.kil.Term;import org.kframework.kil.loader.DefinitionHelper;import org.kframework.krun.gui.Controller.RunKRunCommand;import org.kframework.krun.gui.UIDesign.xmlEditor.XMLDocument;import org.kframework.krun.gui.UIDesign.xmlEditor.XMLEditorKit;import org.kframework.utils.DefinitionLoader;public class ConfigurationPanel extends JPanel implements FocusListener, KeyListener {  private static final boolean enableSave = false;  private static final long serialVersionUID = 1L;  public static HashMap<String, Integer> collapsedViews = new HashMap<String, Integer>();  private String s;  public JTextPane confText;  public JButton save;  private boolean changed;  public ConfigurationPanel() {  }  public ConfigurationPanel(String s) {    this.s = s;    init();  }  public void init(String s) {    this.s = s;    init();  }  public void init() {    this.setBackground(Color.WHITE);    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();    confText = new JTextPane();    confText.setEditorKit(new XMLEditorKit(confText));    confText.setEditable(enableSave);    confText.setText(s);    confText.setPreferredSize(new Dimension(screenSize.width / 3 - 50, screenSize.height - 150));    save = new JButton();    save.setText("Save");    save.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        saveConf();      }    });    this.removeAll();    this.setVisible(false);    this.setVisible(true);    final JScrollPane thePane = new JScrollPane(confText);    javax.swing.SwingUtilities.invokeLater(new Runnable() {      public void run() {        thePane.getVerticalScrollBar().setValue(0);        thePane.getHorizontalScrollBar().setValue(0);      }    });    setDocumentEditable();    this.add(thePane,BorderLayout.NORTH);    this.add(thePane,BorderLayout.SOUTH);        this.revalidate();    this.repaint();    confText.addFocusListener(this);    confText.addKeyListener(this);  }  public void setDocumentEditable() {    ((XMLDocument) confText.getDocument()).setUserChanges(false);  }  @Override  public void focusGained(FocusEvent arg0) {  }  @Override  public void focusLost(FocusEvent arg0) {    saveConf();  }    private void saveConf (){    // check to see if the configuration was changed    if (!enableSave)        return;    if (!changed)      return;    String currentStr = confText.getText()            .replace("<?xml version=\"1.0\" encoding=\"null\"?>", "");    if (!s.equals(currentStr)) {      int resp = JOptionPane.showConfirmDialog(this,              "Do you want to start debugging using the modified configuration?", "",              JOptionPane.YES_NO_OPTION);      if (resp == JOptionPane.YES_OPTION) {        ASTNode out;        try {          org.kframework.parser.concrete.KParser.ImportTblGround(DefinitionHelper.kompiled                  .getCanonicalPath() + "/ground/Concrete.tbl");          out = DefinitionLoader.parseCmdString(currentStr, "", "Saved from gui",                  RunKRunCommand.definitionHelper);          out = out.accept(new RemoveBrackets(RunKRunCommand.definitionHelper));          out = out.accept(new AddEmptyLists(RunKRunCommand.definitionHelper));          out = out.accept(new RemoveSyntacticCasts(RunKRunCommand.definitionHelper));          out = out.accept(new FlattenSyntax(RunKRunCommand.definitionHelper));          out = out.accept(new RemoveSyntacticCasts(RunKRunCommand.definitionHelper));          MainWindow.addDebugTab((Term) out);        } catch (Exception e1) {          JOptionPane.showMessageDialog(this,                  "Unable to save modified configuration due to :\n" + e1.getMessage(),                  "Error",                  JOptionPane.ERROR_MESSAGE);        }      }    }  }  @Override  public void keyPressed(KeyEvent arg0) {  }  @Override  public void keyReleased(KeyEvent arg0) {  }  @Override  public void keyTyped(KeyEvent arg0) {    changed = true;  }}