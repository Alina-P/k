package org.kframework.main;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.kframework.backend.Backend;
import org.kframework.backend.maude.MaudeBackend;
import org.kframework.backend.maude.MaudeFilter;
import org.kframework.kil.Definition;
import org.kframework.kil.loader.DefinitionHelper;
import org.kframework.utils.errorsystem.KException;
import org.kframework.utils.errorsystem.KException.ExceptionType;
import org.kframework.utils.errorsystem.KException.KExceptionGroup;
import org.kframework.utils.file.FileUtil;
import org.kframework.utils.file.KPaths;
import org.kframework.utils.general.GlobalSettings;
import org.kframework.utils.maude.MaudeRun;

public class KompileBackend implements Backend {
	
	private static String metadataTags(List<String> tags) {
		String result = "";
		for (String s : tags) {
			result += s + "=()";
		}
		return "\"" + result + "\"";
	}

	@Override
	public void run(Definition javaDef) throws IOException {
		new MaudeBackend().run(javaDef);

		String load = "load \"" + KPaths.getKBase(true) + "/bin/maude/lib/k-prelude\"\n";

		// load libraries if any
		String maudeLib = GlobalSettings.lib.equals("") ? "" : "load " + KPaths.windowfyPath(new File(GlobalSettings.lib).getAbsolutePath()) + "\n";
		load += maudeLib;

		String transition = metadataTags(GlobalSettings.transition);
		String superheat = metadataTags(GlobalSettings.superheat);
		String supercool = metadataTags(GlobalSettings.supercool);


		MaudeFilter maudeFilter = new MaudeFilter();
		javaDef.accept(maudeFilter);

		String step = "RESOLVE-HOOKS";
		String compile = load + maudeFilter.getResult() + " load \"" + KPaths.getKBase(true) + "/bin/maude/compiler/all-tools\"\n" + "---(\n" + "rew in COMPILE-ONESHOT : partialCompile('"
				+ javaDef.getMainModule() + ", '" + step + ") .\n" + "quit\n" + "---)\n" + " loop compile .\n" + "(compile " + javaDef.getMainModule() + " " + step + " transitions " + transition
				+ " superheats " + superheat + " supercools " + supercool + " anywheres \"anywhere=() function=() predicate=() macro=()\" "
				+ "defineds \"function=() predicate=() defined=()\" .)\n" + "quit\n";

		FileUtil.saveInFile(DefinitionHelper.dotk.getAbsolutePath() + "/compile.maude", compile);

//		if (GlobalSettings.verbose)
//			sw.printIntermediate("Generate Maude file");

		// call maude to kompile the definition
		String compiled = MaudeRun.run_maude(DefinitionHelper.dotk.getAbsoluteFile(), compile);

		int start = compiled.indexOf("---K-MAUDE-GENERATED-OUTPUT-BEGIN---") + "---K-MAUDE-GENERATED-OUTPUT-BEGIN---".length();
		int enddd = compiled.indexOf("---K-MAUDE-GENERATED-OUTPUT-END-----");
		compiled = compiled.substring(start, enddd);

		String defFile = javaDef.getMainFile().replaceFirst("\\.[a-zA-Z]+$", "");
		FileUtil.saveInFile(defFile + "-compiled.maude", load + compiled);

		if (start == -1 || enddd == -1) {
			KException exception = new KException(ExceptionType.ERROR, KExceptionGroup.CRITICAL, "Incomplete output generated by the compiler. Check the '" + defFile + "-compiled.maude'.",
					"top level", "Maude compilation");
			GlobalSettings.kem.register(exception);
		}

	}

	@Override
	public String getDefaultStep() {
		return "LastStep";
	}

}
