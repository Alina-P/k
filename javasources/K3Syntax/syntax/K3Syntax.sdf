%% Grammar for the K language
module K3Syntax
imports Common %% For Comments and whitespace

exports
context-free start-symbols
	Start

context-free syntax
	Require* KModule*	-> Start {cons("KModuleList")}
	"require" STRING	-> Require {cons("Require")}

	%% K Module syntax
	"module" MODNAME KModHeaderItem* KSentence* "endmodule" -> KModule {cons("KModule")}
	"interface" MODNAME KModHeaderItem* KSentence* "endinterface" -> KModule {cons("KInterface")}
	"imports" MODNAME	-> KModHeaderItem {cons("Imports")}

	%% K Sentences
	"configuration"		HIDDEN+	-> KSentence {cons("Config")}
	"rule"				HIDDEN+	-> KSentence {cons("Rule")}
	"context"			HIDDEN+	-> KSentence {cons("Context")}

	"syntax" SORTID "::=" {Prod1 ">"}+	-> KSentence {cons("Syntax")}

context-free syntax
	"left:" {Prod2 "|"}+ -> Prod1 {cons("LeftOrList")}
	"right:" {Prod2 "|"}+ -> Prod1 {cons("RightOrList")}
	"non-assoc:" {Prod2 "|"}+ -> Prod1 {cons("NonAssocOrList")}
	{Prod2 "|"}+ -> Prod1 {cons("OrList")}

	ID "(" {BASICID ","}+ ")"	-> Prod2 {cons("ShortProd")}
	ID "(" {BASICID ","}+ ")"	"[" {Tag ","}+ "]" -> Prod2 {cons("ShortAnnoProd")}

	SyntaxElement+	-> Prod2 {cons("Prod")}
	SyntaxElement+	"[" {Tag ","}+ "]" -> Prod2 {cons("AnnoProd")}
	STRING		-> SyntaxElement {cons("Terminal")}
	SORTID		-> SyntaxElement {cons("Sort")}
	"List{" BASICID "," STRING "}" -> SyntaxElement {cons("List")}

	%%COMPOSEDID	-> NonTerminal {cons("SyntaxCID")}

	KEY							-> Tag {cons("Tag")}
	KEY "(" TAGCONTENT ")"		-> Tag {cons("TagParam")}
	KEY "(" STRING ")"			-> Tag {cons("TagString")}


lexical syntax
	[A-Za-z\-]				-> TAG
	TAG+					-> KEY
	TC*						-> TAGCONTENT
	~[\n\r\(\)\"]			-> TC
	"(" TAGCONTENT ")"		-> TC

lexical restrictions
	TAGCONTENT	-/- ~[\(\)]
	KEY			-/- [A-Za-z\-]
	"syntax"	-/- ~[\n\r\ \t]
	"rule"		-/- ~[\n\r\ \t]
	"context"	-/- ~[\n\r\ \t]
	"imports"	-/- ~[\n\r\ \t]
	"configuration"	-/- ~[\n\r\ \t]


lexical syntax
	COMPOSEDID	-> SORTID
	BASICID		-> SORTID

	~[\t\n\r\ ]+	-> HIDDEN

	"rule"			-> HIDDEN {reject}
	"syntax"		-> HIDDEN {reject}
	"context"		-> HIDDEN {reject}
	"configuration"	-> HIDDEN {reject}
	"endmodule"		-> HIDDEN {reject}
	"endinterface"	-> HIDDEN {reject}
	"#"?[A-Z\-]+	-> MODNAME

	%% String declaration
	"\"" StringChar* "\"" -> STRING
	~[\"\\\n]			-> StringChar
	"\\\""				-> StringChar
	"\\n"				-> StringChar
	"\\r"				-> StringChar
	"\\t"				-> StringChar
	"\\\\"				-> StringChar

	[a-zA-Z][a-zA-Z0-9]*  -> ID
	"#"?[A-Z][a-zA-Z0-9]* -> BASICID
	[A-Z][a-zA-Z0-9]* "{" "#"?[A-Z][a-zA-Z0-9]* "}" -> COMPOSEDID

	[0-9]+			-> NAT


lexical restrictions
	HIDDEN			-/- ~[\t\n\r\ ]
	MODNAME			-/- [A-Z\-]
	BASICID 		-/- [a-zA-Z0-9\{\}]
	ID 				-/- [a-zA-Z0-9\{\}]
	%%COMPOSEDID		-/- [a-zA-Z0-9\{\}]
	NAT				-/- [0-9]



