// Some sorting algorithms

class sorting {
  var input[100], data[100], n;

  method sorting(x) {
    n = x;
  }

  method read2() {
    for i = 0 to (n - 1) do {
      print("input[",i,"] = ");
      input[i] = read();
    }
  }

  method init() {
    for i = 0 to (n - 1) do
      data[i] = input[i];
  }

  method print2() {
    for i = 0 to (n - 1) do
      print(data[i], " ");
    print("\n");
  }

  method insertionSort() {
    for i = 1 to n - 1 do {
      var j=i-1, done=false, t=data[i];
      while (j >= 0) and not done do
        if data[j] > t
          then {
            data[j+1] = data[j];
            j = j - 1;
          }
        else done = true;
      data[j + 1] = t;
    }
  }

  method bubbleSort() {
    var t;
    for i = 0 to n - 1 do
      for j = 0 to n - 2 do
        if data[j] > data[j+1] then {
          t = data[j+1];
          data[j+1] = data[j];
          data[j] = t;
        }
  }

  method siftDown(root, bottom) {
    var done=false, maxChild, t;

    while (root*2 <= bottom and not done) do {
      if (root*2 == bottom) then {
        maxChild = root * 2;
      }
      else if (data[root * 2] > data[root * 2 + 1]) then {
        maxChild = root * 2;
      }
      else { maxChild = root * 2 + 1; }
      if (data[root] < data[maxChild]) then {
        t = data[root];
        data[root] = data[maxChild];
        data[maxChild] = t;
        root = maxChild;
      }
      else { done = true; }
    }
  }

  method heapSort(){
    var t, i = (n/2) - 1;
    while (i >= 0) do {
      this.siftDown(i, n - 1);
      i = i - 1;
    }
    i = n - 1;
    while (i >= 1 ) do {
      t = data[0];
      data[0] = data[i];
      data[i] = t;
      this.siftDown(0, i - 1);
      i = i - 1;
    }
  }
}

class main {
  method main() {
    print("n = ");
    var s = new sorting(read());
    s.read2();

    s.init();
    s.insertionSort();
    s.print2();

    s.init();
    s.bubbleSort();
    s.print2();

    s.init();
    s.heapSort();
    s.print2();
  }
}
