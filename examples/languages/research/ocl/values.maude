--- in ~/work/trunk/core/maude/lib/k-prelude.maude


mod #MAGMA is
  protecting #BOOL .
  protecting #INT .
  protecting #FLOAT .
  protecting #ID .
  protecting #STRING .


--- An Object is a pair (object name, class name)
  sort #Object .
  op _::_ : #Id #Id -> #Object [prec 60] .

--- data types
  ops string int bool real : -> #Id .

--- An element of a collection can be int, bool, string, or object
  sort #MagmaElement .
  subsorts #Int #Bool #String #Float #Object < #MagmaElement .  

  sort #Magma .
  subsort #MagmaElement < #Magma . 

  --- construct a list of elements
  op .Magma : -> #Magma [ctor] .
  op _;Magma_ : #Magma #Magma -> #Magma [ctor assoc comm prec 61 id: .Magma] .


  --- some variables ...
  vars MElt MElt' : #MagmaElement .
  vars M M' M'' : #Magma .


  --- 'in' operator
  op _in_ : #MagmaElement #Magma -> #Bool [prec 62] .
  eq .Magma in M = true .
  eq MElt in .Magma  = false .
  eq MElt in (MElt ;Magma M) = true .
  eq MElt in M = false [owise] . 

  --- 'subset' operator
  op subset(_;_) : #Magma #Magma -> #Bool .
  eq subset ( .Magma ; M ) = true .
  eq subset (M ;  M ;Magma M' ) = true .
  eq subset (M ; M' ) = false [owise] .

  --- 'card' operator
  op card : #Magma -> #Int .
  eq card (.Magma) = 0 .
  eq card (MElt ;Magma M ) = 1 +Int card (M) .

  --- 'empty' operator
  op empty : #Magma -> #Bool .
  eq empty(.Magma) = true .
  eq empty( MElt ;Magma M) = false .

  --- 'asSet' 
  op asSet : #Magma -> #Magma .
  eq asSet ( MElt ;Magma MElt ;Magma M ) = asSet ( MElt ;Magma M ) .
  eq asSet ( M ) = M [owise] .

  --- countOcc
  op countOcc(_;_) : #MagmaElement #Magma -> #Bool .
  eq countOcc ( MElt ; MElt ;Magma M ) = 1 +Int countOcc(MElt ; M) .
  eq countOcc ( MElt ; M ) = 0 [owise] .

  --- union
  op union(_;_) : #Magma #Magma -> #Magma .
  eq union ( M' ; M'') = M' ;Magma M'' .

  --- subtraction
  op subtract(_;_) : #Magma #Magma -> #Magma .
  eq subtract( MElt ;Magma M' ; MElt ;Magma M'') = subtract ( M' ; M'' ) .
  eq subtract( M' ; M'' )  = M' [owise] .

  --- intersection
  op intersection(_;_) : #Magma #Magma -> #Magma .
  eq intersection( MElt ;Magma M' ; MElt ;Magma M'' ) = MElt ;Magma intersection (M' ; M'') .
  eq intersection( M' ; M'' )  = .Magma [owise] .

  --- excludes
  op excludes(_;_) : #Magma #Magma -> #Bool .
  eq excludes ( M ; .Magma ) = true .
  eq excludes ( .Magma ; MElt ;Magma M )  = false .
  ceq excludes ( M' ; MElt ;Magma  M'' ) =  excludes ( M' ; M'' ) if notBool ( MElt in M' ) .
  eq excludes ( M' ; M'' ) = false [owise] .

endm
