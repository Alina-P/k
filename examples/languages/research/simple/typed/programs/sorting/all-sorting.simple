function init(n:int):array of int {
  var x[n]:array of int;
  print("Type ",n," numbers: ");
  for i = 0 to n - 1 do
    x[i] = read();
  print("Finished reading the ",n," numbers\n");
  return x;
}

function printArray(x:array of int):void {
  print("\n");
  for i = 0 to sizeOf(x) - 1 do
    print(x[i]," ");
  print("\n");
}

function reverse(x:array of int):void {
  var n:int = sizeOf(x);
  for i = 0 to n/2 - 1 do {
    var t:int = x[i];
    x[i] = x[n - i - 1];
    x[n - i - 1] = t;
  }
}

function map(m : array of string,
             f : array of function from array of int to void,
             x : array of int) : void {
  for i = 0 to sizeOf(f) - 1 do {
    print(m[i]);
    f[i](x);
  }
}

function insertionSort(x:array of int):void {
  for i = 1 to sizeOf(x) - 1 do {
    var v:int = x[i], j:int = i - 1;
    while (j >= 0) do {
      if x[j] > v then x[j+1] = x[j];
      j = j - 1;
    }
    x[j+1] = v;
  }
}

function bubbleSort(v:array of int):void {
  var n:int = sizeOf(v);
  for i = 0 to n - 1 do
    for j = 0 to n - 2 do
      if v[j] > v[j+1] then {
        var t:int = v[j+1];
        v[j+1] = v[j];
        v[j] = t;
      }
}

function siftDown(x:array of int, root:int, bottom:int):void {
  var done:bool = false, maxChild:int;
  while (root*2 <= bottom and not done) do {
    if (root*2 == bottom) then {
      maxChild = root*2;
    }
    else if (x[root*2] > x[root*2 + 1]) then {
      maxChild = root*2;
    }
    else {
      maxChild = root*2 + 1;
    }
    if (x[root] < x[maxChild]) then {
      var t:int = x[root];
      x[root] = x[maxChild];
      x[maxChild] = t;
      root = maxChild;
    }
    else {
      done = true;
    }
  }
}

function heapSort(x:array of int):void {
  var n:int = sizeOf(x), i:int = n/2 - 1;
  while (i >= 0) do {
    siftDown(x, i, n - 1);
    i = i - 1;
  }
  i = n - 1;
  while (i >= 1 ) do {
    var t:int = x[0];
    x[0] = x[i] ;
    x[i] = t;
    siftDown(x, 0, i - 1);
    i = i - 1;
  }
}

function main():void {
  print("Size of the array to sort = ");
  var x:array of int = init(read()),
      m[11]:array of string,
      f[11]:array of function from array of int to void;
  m[ 0] = "The original unsorted array is:";
  f[ 0] = printArray;
  m[ 1] = "Reversing the array ... ";
  f[ 1] = reverse;
  m[ 2] = "Done!\nThe reversed array is:";
  f[ 2] = printArray;
  m[ 3] = "Sorting the array using insertion sort ... ";
  f[ 3] = insertionSort;
  m[ 4] = "Done!\nThe resulting array is:";
  f[ 4] = printArray;
  m[ 5] = "Reversing the array ... ";
  f[ 5] = reverse;
  m[ 6] = "Done!\nSorting the array using bubble sort ... ";
  f[ 6] = bubbleSort;
  m[ 7] = "Done!\nThe resulting array is:";
  f[ 7] = printArray;
  m[ 8] = "Reversing the array ... ";
  f[ 8] = reverse;
  m[ 9] = "Done!\nSorting the array using heap sort ... ";
  f[ 9] = heapSort;
  m[10] = "Done!\nThe resulting array is:";
  f[10] = printArray;
  map(m,f,x);
}
