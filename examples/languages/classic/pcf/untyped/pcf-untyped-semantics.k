module PCF-UNTYPED-SEMANTICS imports PCF-UNTYPED-SYNTAX
  /*@ \section*{Dynamic semantics}
  This module captures the dynamic semantics of PCF.
  */

  syntax KResult ::= Val

  configuration
    <T color="yellow">
      <k color="LightGreen"> $PGM:Exp </k>
      <env color="LightSkyBlue"> .Map </env>
      // <store color="white"> .Map </store>
	  <store color="red" type="Map"> 
		<item multiplicity="*"> 
		  <loc type="Key"> .K </loc>
		  <value> .K </value>
		</item> 
	  </store>
      <nextLoc color="gray"> 0 </nextLoc>
    </T>

  kvar L N : Nat
  kvar E E' : Exp
  kvar X : Id
  kvar V : Val

  //@ \textbf{Basic constructs}
  rule succ N => N +Int 1

  rule pred N => #if N >Int 0 #then N -Int 1 #else 0 #fi 

  rule zero? 0 => true
  rule zero? N => false when N >Int 0

  rule cond true E E' => E
  rule cond false E E' => E'

  kvar Env Env' : Map

  //@ \textbf{Variable lookup}
  rule <k> X => E <_/k>
       <env_> X |-> L <_/env>
       // <store_> L |-> E <_/store>
       <loc> L </loc>
       <value> E </value>

  //@ \textbf{$\lambda$-abstraction}
  syntax Val ::= closure-lambda ( Map , Id , Exp ) [latex "\textsf{closure}_\lambda({#1},{#2},{#3})"]
  rule <k> lambda X . E => closure-lambda(Env, X, E) <_/k>
       <env> Env </env> 

  rule <k> closure-lambda(Env, X, E) V => E ~> env(Env') <_/k>
       <env> Env' =>  Env[L / X] </env>
       // <store_> . => L |-> V <_/store>
	   (. => 
	       <item>
	           <loc> L </loc>
               <value> V </value>
		   </item>
	   )
       <nextLoc> L => L +Int 1 </nextLoc> 

  //@ \textbf{$\mu$-abstraction}
  syntax Exp ::= closure-mu ( Map , Exp ) [latex "\textsf{closure}_\mu({#1},{#2})"]
  rule <k> mu X . E => closure-mu(Env[L / X], E) <_/k>
       <env> Env </env>
       // <store_> . => L |-> closure-mu(Env[L / X], E) <_/store>
	   (. 
	       => 
		   <item>
	           <loc> L </loc>
               <value> closure-mu(Env[L / X], E) </value>
		   </item>
	   )
       <nextLoc> L => L +Int 1 </nextLoc> 

  rule <k> closure-mu(Env, E) => E ~> env(Env') <_/k>
       <env> Env' => Env </env> 

  //@ \textbf{Environment recovery}
  syntax K ::= env ( Map ) [latex "\textsf{env}({#1})"]
  rule <k> V ~> (env(Env) => .) <_/k>
       <env> _ => Env </env>
       [structural]

end module
