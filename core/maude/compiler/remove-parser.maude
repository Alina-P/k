mod REMOVE-PARSER is 
  including CONVERSION .
  including META-LEVEL-EXTRAS .
  including META-ATTRS .
  var Str : String . 
  var AS : AttrSet . 
  var Q Q' : Qid . var Ty : Type . var Tyl : TypeList . 
  var Op : OpDecl . var OPDS : OpDeclSet . var Parser Mod : Module .
  var Eq : Equation . var Eqs : EquationSet .
  var Mb : MembAx . var Mbs : MembAxSet .
  var Rl : Rule . var Rls : RuleSet .
  var S S' : Sort . var SS : SortSet .
  var SSD : SubsortDecl . var SSDS : SubsortDeclSet .
  var T1 T2 : Term .

  op isParserListSort : String -> Bool .
  eq isParserListSort(Str)
   = substr(Str, 0, length("SyntacticList`{")) == "SyntacticList`{" or-else 
     substr(Str, 0, length("TranslationList`{")) == "TranslationList`{" .

  op semanticListSort : String ~> Sort .
  eq semanticListSort(Str) 
   = qid(substr(Str, find(Str,"List",0),length(Str))) .

  op removeParser : Qid Module ~> Module .
  eq removeParser(Q, Mod) 
   = removeParser(Q, Mod, getParserEqs(getEqs(Mod)))  .

  op removeParser : Qid Module EquationSet ~> Module .
  eq removeParser(Q, Mod, Eqs) 
   = applyParser(setOps(setMbs(setRls(setEqs(flatten(Mod),Eqs),none),none),clearReductionAttrs(getOps(flatten(Mod)))), setSorts(setSubsorts(setOps(removeEqs(Mod, Eqs), removeParserOps(getOps(Mod))), removeParserSubsorts(getSubsorts(Mod))), removeParserSorts(getSorts(Mod)))) .

  op applyParser : Module Module ~> Module .
  eq applyParser(Parser, Mod) = setEqs(setMbs(setRls(Mod, applyParserRls(Parser, getRls(Mod))), applyParserMbs(Parser, getMbs(Mod))), applyParserEqs(Parser, getEqs(Mod)))  .


  op applyParserEqs : Module EquationSet ~> EquationSet .
  eq applyParserEqs(Mod, Eq Eqs) 
   = applyParserEq(Mod, Eq) applyParserEqs(Mod, Eqs) .
  eq applyParserEqs(Mod, none) = none .

  op applyParserEq : Module Equation ~> Equation .
  eq applyParserEq(Mod, Eq) = setLhs(setRhs(Eq,getTerm(metaReduce(Mod,getRhs(Eq)))), getTerm(metaReduce(Mod,getLhs(Eq)))) .
  

  op applyParserRls : Module RuleSet ~> RuleSet .
  eq applyParserRls(Mod, Rl Rls) 
   = applyParserRl(Mod, Rl) applyParserRls(Mod, Rls) .
  eq applyParserRls(Mod, none) = none .

  op applyParserRl : Module Rule ~> Rule .
  eq applyParserRl(Mod, Rl) = setLhs(setRhs(Rl,getTerm(metaReduce(Mod,getRhs(Rl)))), getTerm(metaReduce(Mod,getLhs(Rl)))) .
  
 op applyParserMbs : Module MembAxSet ~> MembAxSet .
  eq applyParserMbs(Mod, Mb Mbs) 
   = applyParserMb(Mod, Mb) applyParserMbs(Mod, Mbs) .
  eq applyParserMbs(Mod, none) = none .

  op applyParserMb : Module MembAx ~> MembAx .
  eq applyParserMb(Mod, Mb) = setTerm(Mb,getTerm(metaReduce(Mod,getTerm(Mb)))) .
  

  op removeParserOps : OpDeclSet ~> OpDeclSet .
  eq removeParserOps(none) = none .
  eq removeParserOps(Op OPDS) = removeParserOp(Op, getAttrs(Op)) removeParserOps(OPDS) .

  op removeParserOp : OpDecl AttrSet ~> OpDeclSet .
  eq removeParserOp(Op, AS pair("parser","")) = none .
  eq removeParserOp(Op, AS) = Op [owise] .

  op getParserEqs : EquationSet ~> EquationSet .
  eq getParserEqs(none) = none .
  eq getParserEqs(Eq Eqs) = getParserEq(Eq, getAttrs(Eq)) getParserEqs(Eqs) .

  op getParserEq : Equation AttrSet ~> EquationSet .
  eq getParserEq(Eq, AS pair("parser","")) = Eq .
  eq getParserEq(Eq, AS) = none [owise] .

  op removeParserSorts : SortSet ~> SortSet .
  eq removeParserSorts(none) = none .
  eq removeParserSorts(S ; SS) 
   = if isParserListSort(string(S)) then none else S fi 
     ; removeParserSorts(SS) .


  op removeParserSubsorts : SubsortDeclSet ~> SubsortDeclSet .
  op removeParserSubsort : SubsortDecl ~> SubsortDeclSet .
  eq removeParserSubsorts(none) = none .
  eq removeParserSubsorts(SSD SSDS) 
   = removeParserSubsort(SSD)    removeParserSubsorts(SSDS) .


  eq removeParserSubsort(subsort S < S' .) 
   = if isParserListSort(string(S')) 
     then none 
     else if isParserListSort(string(S)) 
          then if S' == 'K 
               then none
               else (subsort semanticListSort(string(S)) < S' .) 
               fi
          else (subsort S < S' .) 
          fi 
     fi .
endm

