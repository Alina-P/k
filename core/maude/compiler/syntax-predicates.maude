mod SYNTAX-PREDICATES is
  including META-MODULE-EXTRAS .
  including META-K-RULES .
  including META-LEVEL-EXTRAS .
  including PARSE-METADATA .
  including METADATA-EXTRAS .
  including META-K-MODULE .
  including K-META-OPS .
  including  META-K-PREDICATES .
  including META-K-CONTEXTS .
 
  op syntaxPreds : Module -> Module .
  eq syntaxPreds(M)
   = syntaxPreds(M, flatten(M)) .

  op syntaxPreds : Module Module -> Module .
  eq syntaxPreds(M, Flat)
   = syntaxPreds(M, Flat, removeSorts(lesserSorts(Flat, K), NeK ; K), makeSubsorts(Flat,getSorts(Flat),getSorts(Flat)), getOps(Flat)) .

  op syntaxPreds : Module Module SortSet  SubsortDeclSet OpDeclSet -> Module .
  eq syntaxPreds(M, Flat, SS, SSDS, OPDS) = syntaxPreds(M, Flat, SS \ builtinSorts(M,SS), builtinSorts(M, SS), SSDS, OPDS) .

  op syntaxPreds : Module Module SortSet SortSet SubsortDeclSet OpDeclSet -> Module .
  eq syntaxPreds(M, Flat, SS, BSS, SSDS, OPDS)
   = removeImports(removeSorts(removeSyntaxSubsorts(setMbs(setOps( 
                  setEqs(M,syntaxPredsEqs(SS, getEqs(M)))
                  ,
                  syntaxPreds(SS ; BSS) syntaxOps(M, Flat, SS ; BSS, getOps(M))
                  ),
            syntaxPredsMbs(SS, syntaxPreds(getSubsorts(SSDS, SS)) 
              syntaxPreds(getOps(OPDS, SS)) 
              getMbs(M))
              builtinSyntaxPreds(BSS)
            ), SS), SS), (including 'K-RESULT .)) .



  op removeSyntaxSubsorts : SubsortDeclSet SortSet -> SubsortDeclSet .
  eq removeSyntaxSubsorts(SSDS (subsort S < S' .), S ; SS)
   = removeSyntaxSubsorts(SSDS, S ; SS) .
  eq removeSyntaxSubsorts(SSDS (subsort S < S' .), S' ; SS)
   = if isBuiltin(S) then (subsort S < K .) removeSyntaxSubsorts(SSDS, S' ; SS) else removeSyntaxSubsorts(SSDS, S' ; SS) fi .
  eq removeSyntaxSubsorts(SSDS, SS) = SSDS [owise] .

  op removeSyntaxSubsorts : Module SortSet -> Module .
  eq removeSyntaxSubsorts(M, SS) 
   = setSubsorts(M, removeSyntaxSubsorts(getSubsorts(M),SS)) .



 op syntaxPredsMbs : SortSet MembAxSet ~> MembAxSet .
 eq syntaxPredsMbs(SS, Mbs Mb)
  =  syntaxPredsMbs(SS, Mbs) syntaxPredsMb(SS, Mb) .
 eq syntaxPredsMbs(SS, none) = none .

 op syntaxPredsMb : SortSet MembAx ~> MembAx .
ceq syntaxPredsMb(SS,Mb)
  = syntaxPredsKRl(SS, KRS, syntaxPredsT(SS, getContents(KRS)), syntaxCondition(syntaxVars(SS, noDuplicates(getVars(getContents(KRS))))))
 if KRS := splitKRule(Mb) [print "syntaxPredsMb splitKRule " KRS].
ceq syntaxPredsMb(SS,Mb)
  = syntaxPredsKCxt(SS, KCS, syntaxPredsT(SS, getContents(KCS)), syntaxCondition(syntaxVars(SS, noDuplicates(getVars(getContents(KCS))))))
 if KCS := splitKContext(Mb) .
ceq syntaxPredsMb(SS,Mb)
  = plugKConfig(setContents(KCfgS,syntaxPredsT(SS, getContents(KCfgS))))
 if KCfgS := splitKConfig(Mb) .
---(
 eq syntaxPredsMb(SS,Mb)
  = plugMb(syntaxPredsT(SS,getTerm(Mb)), getType(Mb), getAttrs(Mb), mkBaseCondition(syntaxCondition(syntaxVars(SS, noDuplicates(getVars(getTerm(Mb)))))) /\ syntaxPredsCond(SS, getCond(Mb))) [owise] .
---)


 op syntaxPredsKCxt : SortSet KContextSplit Term TermList ~> MembAx .
 eq syntaxPredsKCxt(SS, KCS, Trm, Trms) = plugKContext(setCondition(setContents(KCS, Trm), andBool(flattenSyntaxT(SS, getCondition(KCS)),Trms))) .

 op syntaxPredsKRl : SortSet KRuleSplit Term TermList ~> MembAx .
 eq syntaxPredsKRl(SS, KRS, Trm, Trms) = plugKRule(setCondition(setContents(KRS, Trm), andBool(flattenSyntaxT(SS, getCondition(KRS)),Trms))) .


 op syntaxPredsT : SortSet Term ~> Term .
 eq syntaxPredsT(SS, Trm) = flattenSyntaxT(SS, Trm) .

  op flattenSyntaxT : SortSet TermList ~> TermList .
  eq flattenSyntaxT(SS, (Q[Trms],Trms')) = Q[flattenSyntaxT(SS, Trms)],flattenSyntaxT(SS, Trms') .
  eq flattenSyntaxT(SS, empty) = empty .
  eq flattenSyntaxT(SS, (CV, Trms'))  
   = if getType(CV) in SS 
     then setType(CV, NeK)
     else if getType(CV) == ResultList 
          then setType(CV, KList)
          else CV 
          fi
     fi, flattenSyntaxT(SS, Trms') .

  op syntaxVars : SortSet TermList ~> TermList .
  eq syntaxVars(SS, empty) = empty .
  eq syntaxVars(SS, (V,Trms))
   = if getType(V) in SS or-else getType(V) == ResultList
     then V,syntaxVars(SS, Trms) else syntaxVars(SS, Trms) fi .

  op syntaxCondition_ : TermList ~> TermList .
  eq syntaxCondition(empty) = empty .
  eq syntaxCondition(NTrms) = andBool($syntaxCondition(NTrms)) .

  op $syntaxCondition_ : TermList ~> TermList .
  eq $syntaxCondition(empty) = empty .
  eq $syntaxCondition(V, Trms) 
   = if getType(V) == ResultList 
     then kApply(predicateLabel(KResult), setType(V,KList))
     else kApply(predicateLabel(getType(V)),setType(V,NeK)) 
     fi,syntaxCondition(Trms) .



 op syntaxPredsEqs : SortSet EquationSet ~> EquationSet .
 eq syntaxPredsEqs(SS, Eqs Eq)
  =  syntaxPredsEqs(SS, Eqs) plugEq(syntaxPredsT(SS, getLhs(Eq)), syntaxPredsT(SS, getRhs(Eq)), getAttrs(Eq), mkBaseCondition(syntaxCondition(syntaxVars(SS, noDuplicates(getVars(getLhs(Eq)))))) /\ syntaxPredsCond(SS, getCond(Eq))) .
 eq syntaxPredsEqs(SS, none) = none .


 op mkBaseCondition : TermList ~> Condition .
 eq mkBaseCondition(empty) = nil .
 eq mkBaseCondition(Trm) = (Trm = trueCt) .
 

 op syntaxPredsCond : SortSet Condition ~> Condition .
 eq syntaxPredsCond(SS, Trm1 = Trm2 /\ Cond)
  = syntaxPredsT(SS, Trm1) = syntaxPredsT(SS, Trm2)
    /\ syntaxPredsCond(SS, Cond) .
 eq syntaxPredsCond(SS, Trm1 := Trm2 /\ Cond)
  = syntaxPredsT(SS, Trm1) := syntaxPredsT(SS, Trm2)
    /\ syntaxPredsCond(SS, Cond) .
 eq syntaxPredsCond(SS, Trm1 => Trm2 /\ Cond)
  = syntaxPredsT(SS, Trm1) => syntaxPredsT(SS, Trm2)
    /\ syntaxPredsCond(SS, Cond) .
 eq syntaxPredsCond(SS, Trm : Ty /\ Cond)
  = syntaxPredsT(SS, Trm) : Ty
    /\ syntaxPredsCond(SS, Cond) .
 eq syntaxPredsCond(SS, nil) = nil .





 op syntaxPreds : OpDeclSet ~> MembAxSet .
 eq syntaxPreds((op '<Floats> : nil -> Ty [AS] .) OPDS)
  = syntaxPreds(OPDS) .
 eq syntaxPreds((op Q : nil -> Ty [AS] .) OPDS)
   = plugKRule(R{replaceS[kApply(predicateLabel(Ty),mkConstant(Q,Ty)),trueCt],empty, removeOpAttrs(AS) metadata(pair("structural","") pair("predicate",""))}) 
     syntaxPreds(OPDS) [owise] .
 eq syntaxPreds((op Q : NeTyl -> Ty [AS] .) OPDS)
   = plugKRule(R{replaceS[kApply(predicateLabel(Ty),Q[genVars(Universal2K(NeTyl), "Is", 1)]),trueCt],empty, removeOpAttrs(AS) metadata(pair("predicate",""))}) 
     syntaxPreds(OPDS) .
 eq syntaxPreds((none).OpDeclSet) = none .


  op syntaxOps : Module Module SortSet OpDeclSet ~> OpDeclSet .
  eq syntaxOps(M, Flat, SS, Op OPDS)
   = syntaxOp(M, Flat, SS, Op)
     syntaxOps(M, Flat, SS, OPDS) .
  eq syntaxOps(M, Flat, SS, none) = none .

  
  op syntaxOp : Module Module SortSet OpDecl ~> OpDecl .
  eq syntaxOp(M, Flat, SS, (op Q : Tyl -> Ty [AS] .))
   = (op Q : syntaxTyl(M, Flat, SS, Tyl) -> syntaxRTy(M, Flat, SS, Ty) [AS ---(metadata(removeHybrid(metadataParse(AS))))] .) . 

  op syntaxTyl : Module Module SortSet TypeList ~> TypeList .
  eq syntaxTyl(M, Flat, SS, Ty Tyl) 
   = syntaxTy(M, Flat, SS, Ty) 
     syntaxTyl(M, Flat, SS, Tyl)  .
  eq syntaxTyl(M, Flat, SS, nil) = nil .
     
  op syntaxTy : Module Module SortSet Type ~> Type .
  eq syntaxTy(M, Flat, SS, Ty) 
   = if Ty in SS then K else if Ty == ResultList then KList else Ty fi fi .

  op syntaxRTy : Module Module SortSet Type ~> Type .
  eq syntaxRTy(M, Flat, SS, Ty) 
   = if isBuiltin(Ty) then Ty else syntaxTy(M, Flat, SS, Ty) fi .

---(
  op removeHybrid : AttrSet -> AttrSet .
  eq removeHybrid(AS pair("hybrid","")) = AS .
  eq removeHybrid(AS) = AS [owise] .
---)

 op syntaxPreds : SubsortDeclSet ~> MembAxSet .
 eq syntaxPreds((subsort S < S' .) SSDS)
  = plugKRule(R{replaceS[kApply(predicateLabel(S'),mkVariable(S,S)),trueCt],empty, metadata(pair("predicate",""))}) 
    syntaxPreds(SSDS) .
 eq syntaxPreds((none).SubsortDeclSet) = none .

 op builtinSyntaxPreds : SortSet ~> MembAxSet .
 eq builtinSyntaxPreds(S ; SS) 
  = plugKRule(R{replaceS[kApply(predicateLabel(S),mkVariable(S,S)),trueCt],empty, metadata(pair("predicate",""))})  
    builtinSyntaxPreds(SS) .
 eq builtinSyntaxPreds(none) = none .

  op syntaxPreds : SortSet ~> OpDeclSet .
  eq syntaxPreds(S ; SS) 
   = (op predicateLabelS(S) : nil -> KLabel [metadata(pair("predicate", ""))] .) 
     syntaxPreds(SS) .
  eq syntaxPreds((none).SortSet) = none .
  
  var Q : Qid .  var Ct : Constant .
  var Ty : Type . var NeTyl : NeTypeList .  var Tyl : TypeList .

  var OPDS : OpDeclSet . var Op : OpDecl .  var AS : AttrSet .
  var SSDS : SubsortDeclSet .  var SS BSS : SortSet . var S S' : Sort .
  var M Flat : Module .
  var Mbs : MembAxSet .  var Mb : MembAx . 
  var Eqs : EquationSet .  var Eq : Equation . 
  var Trm Trm1 Trm2 : Term .   var CV : Term . var V : Variable .
  var Trms Trms' : TermList .  var NTrms : NeTermList .  var Cond : Condition .
  var KRS : KRuleSplit . var KCS : KContextSplit .  var KCfgS : KConfigSplit .
endm
