K Tutorial --- LAMBDA --- Syntax
by Grigore Rosu

Here we define our first K module, which contains the initial syntax of LAMBDA.

The keyword "syntax" adds new productions to the syntax grammar, using a
BNF-like notation.

Terminals are enclosed in double-quotes, like strings.

You can define multiple productions for the same non-terminal in the same syntax
declaration using the "|" separator.

Productions can have attributes, which are enclosed in square brackets.

The attribute "left" tells the parser that we want the lambda application to be
left associative.  For example, "a b c d" will then parse as "(((a b) c) d)".

The attribute "bracket" tells the parser to not generate a node for the parenthesis
production in the abstract syntax trees associated to programs.  In other words,
we want to allow parentheses to be used for grouping, but we do not want to bother
to give them their obvious (ignore) semantics.

After you are done with typing your definition in the file lambda.k, kompile it
in the current folder with the command:

  kompile lambda.k

If you get no errors then a parser has been generated by the K tool.  This parser
will be called from now on by default by the krun tool.  To see whether and how
the parser works, write some LAMBDA programs and store them in files with the
extension .lambda, or use the predefined ones in ../../programs.  For example:

  krun ../../programs/p3.lambda

Make sure you call the krun command from the folder containing your language
definition (otherwise type "krun --help" to learn how to pass a language definition
as a parameter to kast).  The file p3.lambda contains the LAMBDA program
"(lambda z.(z z)) (lambda x.lambda y.(x y))" ---known for being the smallest
closed lambda expression binding only distinct variables and still requiring a
substitution operation that avoids variable capture.  The krun command should then
produce the output:

<k>
  (lambda z . (z  z))  (lambda x . (lambda y . (x  y))) 
</k>

If you see such an output it means that your program has been parsed (and then
pretty printed) correctly.

Note that the program has been placed in a <k> ... </k> cell.  In K everything
happens in cells.  If you do not define a configuration in your definition, then
a configuration will be created automatically for you which contains only one cell,
called k.

Parse several programs to get a feel for how the parser works.  Parse also some
incorrect programs, to see how the parser generates error messages.  For example,
the predefined programs p1.lambda, p2.lambda, p3.lambda should all parse, but
the others should not parse yet (we need to add more features to the language).
