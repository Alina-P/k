K Tutorial --- LAMBDA --- Evaluation Strategies using Strictness
by Grigore Rosu

You can use the attribute "strict" to tell K that the corresponding construct
has a strict evaluation strategy, that is, that its arguments need to be
evaluated before the semantics of the construct applies.  The order of
argument evaluation is purposely unspecified when using "strict", and indeed
the K tool allows us to detect all possible non-deterministic behaviors that
result from this intended underspecification of evaluation strategies.  We will
learn how to do that when we define the IMP language later in this tutorial;
we will also learn how to enforce a particular order of evaluation.

In order for the above strictness declarations to work effectively and
efficiently, we need to tell the K tool which expressions are meant to be
results of computations, so that it will not attempt to evaluate them anymore.
One way to do it is to make "Val" a syntactic subcategory of the builtin
KResult syntactic category.  See lambda.k.

Compile again and then run some programs.  They should all work as expected.

Now that we have a first complete language definition, we can go ahead and
also generate documentation for it:

  kompile lambda --pdf   (this generates PDF documentation)
  kompile lambda --html  (this generates HTML documentation)

To enhance readability, we may want to replace the keyword "lambda" by the
mathematical lambda symbol in generated documentation.  See the next lesson.
