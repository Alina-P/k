load builtins-interface.maude

--- Level 0

mod K-TECHNIQUE is 
  including #INT-INTERFACE .
  including #BOOL-INTERFACE .

  var K : K . var Ks : KList .
  var LItem : ListItem .  var List : List .

  sorts KItem K .
  subsorts KItem < K .
  op . : -> K .
  op _~>_ : K K -> K [prec 100  assoc id: . metadata "latex=(renameTo _\\ensuremath{\\kra}_)"] .

  sorts KList NeKList .

  subsort K < NeKList < KList .
  op .KList : -> KList [metadata "latex=(renameTo \\ensuremath{\\dotCt{List\\{K\\}}})"] .

  op _`,`,_ : KList KList -> KList [assoc id: .KList prec 121 metadata "latex=(renameTo _\\ensuremath{,\\!\\!,}_)"] .
  --- One should not modify the precedence above.  
  --- Might cause the compilation to fail.
  op _`,`,_ : NeKList KList -> NeKList [ditto] .
  op _`,`,_ : KList NeKList -> NeKList [ditto] .


  sorts KLabel .

  op _`(_`) : KLabel KList -> KItem [prec 0 gather(& &)] .

  sort ListItem List NeList .
  subsort ListItem < NeList < List .
  subsort ListItem < List .
  op . : -> List .
  op ListItem : K -> ListItem  [metadata "latex=(renameTo _)"] .
  op __ : List List -> List [assoc id: .] .
  op __ : NeList List -> NeList [ditto] .
  op __ : List NeList -> NeList [ditto] .
  
  sort BagItem Bag NeBag .
  subsort BagItem < NeBag < Bag .
  subsort BagItem < Bag .
  op . : -> Bag .
  op BagItem : K -> BagItem [metadata "latex=(renameTo _)"] .
  op __ : Bag Bag -> Bag [assoc comm id: .] .
  op __ : NeBag Bag -> NeBag [ditto] .
  op BagMapItem : K Bag -> BagItem .

  sort SetItem Set NeSet .
  subsort SetItem < NeSet < Set .
  subsort SetItem < Set .
  op . : -> Set .
  op SetItem : K -> SetItem [metadata "latex=(renameTo _)"] .
  op __ : Set Set -> Set [assoc comm id: .] .
  op __ : NeSet Set -> NeSet [ditto] .

  eq SI:SetItem SI:SetItem = SI:SetItem .

  sort MapItem Map NeMap .
  subsort MapItem < NeMap < Map .
  subsort MapItem < Map .
  op . : -> Map .
  op _|->_ : K K -> MapItem [metadata "latex=(renameTo _\\ensuremath{\\mapsto}_)"] .
  op __ : Map Map -> Map [assoc comm id: . prec 120] .
  op __ : NeMap Map -> NeMap [ditto] .

  sort CellLabel .

  op <_>_</_> : CellLabel K CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel List CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Bag CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Set CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Map CellLabel -> BagItem [prec 0 format(nib g b o+ -b g b o)] .

endm

--- K notation starts from here on

mod K-SENTENCE is
  sort KSentence . 
endm


mod K-HOLE is
  including K-TECHNIQUE .
  op HOLE : -> K .
endm


--- Strictness Level

mod K-STRICTNESS is 
  including K-HOLE .
  including #STRING-INTERFACE .
  op #freezer : K -> KLabel [strat(0) frozen] .

  op cool : -> KLabel .
  op heat : -> KLabel .
  op heated : -> KLabel .
  op redex : -> KLabel .

endm

mod K-STRICTNESS-DEFAULTS is
  including K-STRICTNESS .
  eq heat(heated(K)) = K .
  rl [heat-choice]: heat(heated(Ks,,K,,Ks')) => K
     [metadata "superheat=(choice)"] .

  vars K : K . var Ks Ks' : KList .  var NKs : NeKList .
  eq <_>_</_>(k,_`(_`)(cool,zk:K),k)
   = <_>_</_>(k,zk:K,k)[metadata "supercool=(end)"].
  eq <_>_</_>(k,_~>_(_`(_`)(heat,_`,`,_(_`(_`)(redex,_`,`,_(K:K,NKs:NeKList)),Ks:KList)),GENERATEDKWRAPRest:K),k)
   = <_>_</_>(k,_~>_(_`(_`)(heat,_`,`,_(NKs:NeKList,Ks:KList)),GENERATEDKWRAPRest:K),k)[owise].
  eq <_>_</_>(k,_~>_(_`(_`)(heat,_`,`,_(_`(_`)(redex,K:K),_`,`,_(Ks:KList,_`(_`)(heated,Ks':KList)))),GENERATEDKWRAPRest:K),k)
   = <_>_</_>(k,_~>_(_`(_`)(heat,_`,`,_(Ks:KList,_`(_`)(heated,_`,`,_(Ks':KList,K:K)))),GENERATEDKWRAPRest:K),k)[owise].
  eq <_>_</_>(k,_~>_(_`(_`)(cool,zk:K),_~>_(Next:KItem,GENERATEDKWRAPRest:K)),k)
   = <_>_</_>(k,_~>_(_`(_`)(cool,_~>_(zk:K,Next:KItem)),GENERATEDKWRAPRest:K),k)[metadata "supercool=(next)" owise].
endm

mod K-CONTEXTS is
  including K-HOLE .
  including K-SENTENCE .
  ops context_ : K -> [KSentence] [prec 126] .
  ops context_when_ : K K -> [KSentence] [prec 126] .
  op wrap-with : K K -> K .
endm

--- KLabel-Wrappers level

mod K-WRAPPERS-LABELS is
  including K-TECHNIQUE .
  including #STRING-INTERFACE .
  op KLabel2KLabel_ : KLabel -> KLabel [metadata "wrapper=(builtin)"] .
  op CellLabel2KLabel_ : CellLabel -> KLabel [metadata "wrapper=(builtin)"] .
  op KList2KLabel_ : KList -> KLabel [metadata "wrapper=(builtin)"] .
  op Bag2KLabel_ : Bag -> KLabel [metadata "wrapper=(builtin)"] .
  op Set2KLabel_ : Set -> KLabel [metadata "wrapper=(builtin)"] .
  op List2KLabel_ : List -> KLabel [metadata "wrapper=(builtin)"] .
  op Map2KLabel_ : Map -> KLabel [metadata "wrapper=(builtin)"] .
  op 'wrap-with : -> KLabel .
  op #_ : #Bool -> KLabel [metadata "wrapper=(builtin)"] .
endm


---- K Rules Level 

mod K-RULES is
  including K-SENTENCE .
  including K-TECHNIQUE .
--- TODO: and a mixing of structural/bidirectional attributes
  op _=>_ : K K -> K [prec 125] .
  op _=>_ : KLabel KLabel -> KLabel [prec 125] .
  op _=>_ : CellLabel CellLabel -> CellLabel [prec 125] .
  op _=>_ : KList KList -> KList [prec 125] .
  op _=>_ : Map Map -> Map [prec 125] .
  op _=>_ : List List -> List [prec 125] .
  op _=>_ : Bag Bag -> Bag [prec 125] .
  op _=>_ : Set Set -> Set [prec 125] .
endm


mod K-EVAL is 
  including K-TECHNIQUE .
  op #eval_ : Map -> Bag .
endm

mod K-CONDITION-SEARCH is
  including K-TECHNIQUE .
  op search_ : KList -> #Bool .
  op search_ : KLabel -> #Bool .
  op search_ : List -> #Bool .
  op search_ : Bag -> #Bool .
  op search_ : Set -> #Bool .
endm

mod K-BUILTINS is
endm

mod K is 
  including K-TECHNIQUE .
  including K-WRAPPERS-LABELS .
  including K-BUILTINS .
  including K-RULES .               --- to write k rules with in-place rewriting
  including K-EVAL .
  including K-CONTEXTS .
endm


load builtins.maude
