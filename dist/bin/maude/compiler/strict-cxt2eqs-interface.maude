load strict-cxt2eqs

mod STRICTCXT2EQS-METADATA-META is
  including STRICTCXT2EQS .
  including PARSE-METADATA .
  var M : Module . var AS AS' : AttrSet . var Str : String . var T1 T2 : Term . var Sort : Type .  var Cond : TermList .
  var MAS : MembAxSet . var Eqs : EquationSet . var Rls : RuleSet .
  eq strictCxt2eq(M, MAS, Eqs, Rls, T1, T2, AS metadata(Str), Cond, AS')
   = strictCxt2eq(M, MAS, Eqs, Rls, T1, T2, metadataParse(Str), Cond, AS') .
endm

mod STRICTCXT2EQS-META is
  including STRICTCXT2EQS-METADATA-META .
  including STRICTCXT2EQS .
  including META-LEVEL-EXTRAS .
  var StrictCxt StrictEqs : String .  var M M' : Module .
  var QStrictCxt QStrictEqs : Qid .
  op strictCxt2eqs : String String ~> Module .
  eq strictCxt2eqs(StrictCxt, StrictEqs) 
   = strictCxt2eqs(qid(StrictCxt), qid(StrictEqs)) .

  op strictCxt2eqs : Qid Qid ~> Module .
  eq strictCxt2eqs(QStrictCxt, QStrictEqs) 
   = setName(addModule(setImports(strictCxt2eqs(QStrictCxt, QStrictCxt, upModule(QStrictCxt,false), upModule(QStrictCxt,true), 'k, none), including 'K-STRICTNESS .),setMbs(removeImports(upModule(QStrictCxt, false), including 'K-CONTEXTS .),none)), QStrictEqs)
 .

  op compileSTRICTCXT2EQS : Module AttrSet ~> Module .
  eq compileSTRICTCXT2EQS(M, AS:AttrSet) = $compileSTRICTCXT2EQS(setImports(strictCxt2eqs(getName(M), getName(M), M, flatten(M), 'k, AS:AttrSet), including 'K-STRICTNESS .),setMbs(removeImports(M, including 'K-CONTEXTS .),none)) .

  op $compileSTRICTCXT2EQS : Module Module -> Module .
  eq $compileSTRICTCXT2EQS(M, M') = setName(addModule(M, M'), getName(M)) .
endm

