module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
	"++" Exp -> Exp {cons("Exp1284Syn")}
} > {
	Exp "[" InsertDzExps "]" -> Exp {cons("Exp1285Syn")}
} > {
	Exp "(" InsertDzExps ")" -> Exp {cons("Exp1286Syn")}
	"-" Exp -> Exp {cons("Exp1287Syn")}
} > { left:
	Exp "*" Exp -> Exp {left, cons("Exp1290Syn")}
	Exp "/" Exp -> Exp {left, cons("Exp1292Syn")}
	Exp "%" Exp -> Exp {left, cons("Exp1293Syn")}
} > { left:
	Exp "+" Exp -> Exp {left, cons("Exp1294Syn")}
	Exp "-" Exp -> Exp {left, cons("Exp1295Syn")}
} > { non-assoc:
	Exp "<" Exp -> Exp {non-assoc, cons("Exp1296Syn")}
	Exp "<=" Exp -> Exp {non-assoc, cons("Exp1297Syn")}
	Exp ">" Exp -> Exp {non-assoc, cons("Exp1298Syn")}
	Exp ">=" Exp -> Exp {non-assoc, cons("Exp1299Syn")}
	Exp "==" Exp -> Exp {non-assoc, cons("Exp1300Syn")}
	Exp "!=" Exp -> Exp {non-assoc, cons("Exp1302Syn")}
} > {
	"not" Exp -> Exp {cons("Exp1303Syn")}
} > { left:
	Exp "and" Exp -> Exp {left, cons("Exp1304Syn")}
	Exp "or" Exp -> Exp {left, cons("Exp1305Syn")}
} > {
	Exp "=" Exp -> Exp {right, cons("Exp1306Syn")}
}

context-free start-symbols
	Start
context-free syntax
	DzInt -> Int
	DzString -> String
	Stmts -> Start
	{Id ","}* -> Ids {cons("Ids1ListSyn")}
	{Exp ","}* -> Exps {cons("Exps1ListSyn")}
	"var" Exps ";" -> Ddecl {cons("Ddecl1VarDeclSyn")}
	"function" Id "(" Ids ")" Stmt -> Ddecl {cons("Ddecl1FuncDeclSyn")}
	Int -> Exp
	Bool -> Exp
	Id -> Exp
	String -> Exp
	"(" Exp ")" -> Exp {bracket}
	"sizeOf" "(" Exp ")" -> Exp {cons("Exp1288Syn")}
	"read" "(" ")" -> Exp {cons("Exp1289Syn")}
	"{" "}" -> Stmt {cons("Stmt1307Syn")}
	"{" Stmts "}" -> Stmt {cons("Stmt1308Syn")}
	"return" Exp ";" -> Stmt {cons("Stmt1325Syn")}
	"return" ";" -> Stmt {cons("Stmt1326Syn")}
	"write" "(" Exp ")" ";" -> Stmt {cons("Stmt1327Syn")}
	"throw" Exp ";" -> Stmt {cons("Stmt1329Syn")}
	"acquire" Exp ";" -> Stmt {cons("Stmt1332Syn")}
	"release" Exp ";" -> Stmt {cons("Stmt1333Syn")}
	"rendezvous" Exp ";" -> Stmt {cons("Stmt1334Syn")}
	"print" "(" Exps ")" ";" -> Stmt {cons("Stmt1335Syn")}
	Exp ";" -> Stmt {cons("Stmt1309Syn")}
	"if" Exp "then" Stmt "else" Stmt -> Stmt {avoid, cons("Stmt1320Syn")}
	"if" Exp "then" Stmt -> Stmt {cons("Stmt1322Syn")}
	"while" Exp "do" Stmt -> Stmt {cons("Stmt1323Syn")}
	"for" Id "=" Exp "to" Exp "do" Stmt -> Stmt {cons("Stmt1324Syn")}
	"try" Stmt "catch" "(" Id ")" Stmt -> Stmt {cons("Stmt1328Syn")}
	"spawn" Stmt -> Stmt {cons("Stmt1330Syn")}
	Ddecl -> Stmts
	Stmt -> Stmts
	Stmts Stmts -> Stmts {right, cons("Stmts1336Syn")}
	DzModelCheckerState -> ModelCheckerState
	DzProp -> Prop
	DzModelCheckResult -> ModelCheckResult
	Prop -> LTLFormula
	DzBool -> Bool
	DzLTLFormula -> LTLFormula
	DzId -> Id
	DzFloat -> Float
	Exps -> InsertDzExps

%% start symbols


	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzBool	-> DzBool	{cons("DzBool1Const")}
	DzDzId		-> DzId		{cons("DzId1Const")}
	DzDzString	-> DzString	{cons("DzString1Const")}

	DzDzINT		-> DzDzInt
	DzDzID		-> DzDzId
	DzDzBOOL	-> DzDzBool
	DzDzSTRING	-> DzDzString

lexical syntax
	"main" -> DzDzId


	"to" -> DzDzID {reject}
	"for" -> DzDzID {reject}
	"var" -> DzDzID {reject}
	"catch" -> DzDzID {reject}
	"while" -> DzDzID {reject}
	"function" -> DzDzID {reject}
	"throw" -> DzDzID {reject}
	"spawn" -> DzDzID {reject}
	"if" -> DzDzID {reject}
	"write" -> DzDzID {reject}
	"read" -> DzDzID {reject}
	"do" -> DzDzID {reject}
	"rendezvous" -> DzDzID {reject}
	"acquire" -> DzDzID {reject}
	"else" -> DzDzID {reject}
	"or" -> DzDzID {reject}
	"return" -> DzDzID {reject}
	"sizeOf" -> DzDzID {reject}
	"print" -> DzDzID {reject}
	"and" -> DzDzID {reject}
	"not" -> DzDzID {reject}
	"then" -> DzDzID {reject}
	"release" -> DzDzID {reject}
	"try" -> DzDzID {reject}

lexical restrictions
	%% follow restrictions

