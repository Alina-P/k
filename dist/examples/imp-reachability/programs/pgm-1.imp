/*
Running instructions:
1. Bounded model-checking
   `krun programs/pgm-1.imp --search --depth 5`
2. Pattern search
   `krun programs/pgm-1.imp --search --bound 1 --pattern="< T > < goal > < k >\\ 
   .K </ k > B1:Bag </ goal > < goal > < k > .K </ k > B2:Bag </ goal > </ T >"`

This program coresponds to the following reachability formula:
<k>
while (y <= b)
{
  b = b - y;
  a = a + 1;
}
</k>
<state> a |-> A b |-> B x |-> X y |-> Y </state>
<condition> 0 <=Int X andBool 0 <Int Y andBool X ==Int A *Int Y +Int B andBool B >=Int 0 </condition>
=>
<k> .K </k>
<state> a |-> A' b |-> B' x |-> X y |-> Y </state>
<condition> 0 <=Int X andBool 0 <Int Y andBool X ==Int A' *Int Y +Int B' andBool B' >=Int 0 andBool B' <Int Y </condition>
*/

<k>
while (y <= b)
 {
  b = b - y; 
  a = a + 1;
} ~> match(
		<k> .K </k>
		<state> a |-> #symInt(a1) b |-> #symInt(b1) x |-> #symInt(x) y |-> #symInt(y) </state>
		<condition> 0 <=Int #symInt(x) andBool 0 <Int #symInt(y) andBool #symInt(x) ==Int #symInt(a1) *Int #symInt(y) +Int #symInt(b1) andBool #symInt(b1) >=Int 0 andBool #symInt(b1) <Int #symInt(y) </condition>	  )
</k>
<state> a |-> #symInt(a) b |-> #symInt(b) x |-> #symInt(x) y |-> #symInt(y) </state>
<condition> 0 <=Int #symInt(x) andBool 0 <Int #symInt(y) andBool #symInt(x) ==Int #symInt(a) *Int #symInt(y) +Int #symInt(b) andBool #symInt(b) >=Int 0 </condition>
<ruleConstraints> symFreezeLabel(-1) </ruleConstraints>
