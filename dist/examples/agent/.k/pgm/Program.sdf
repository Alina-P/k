module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{ left:
	K "*" K -> K {left, cons("K1284Syn")}
	K "/" K -> K {left, cons("K1285Syn")}
} > { left:
	K "+" K -> K {left, cons("K1286Syn")}
} > { non-assoc:
	K "<=" K -> K {cons("K1287Syn")}
	K "==" K -> K {cons("K1288Syn")}
} > {
	"not" K -> K {cons("K1289Syn")}
} > { left:
	K "and" K -> K {cons("K1290Syn")}
}

context-free priorities
{
	"acquire" K -> K {cons("K1338Syn")}
	"release" K -> K {cons("K1339Syn")}
	"rendezvous" K -> K {cons("K1340Syn")}
} > {
	"spawn" K -> K {cons("K1342Syn")}
}

context-free priorities
{
	K K -> K {left, cons("K1309Syn")}
} > {
	"\\" InsertDzId "." K -> K {cons("K1320Syn")}
}

context-free priorities
{
	"ref" K -> K {cons("K1334Syn")}
	"*" K -> K {cons("K1335Syn")}
} > {
	K ":=" K -> K {cons("K1336Syn")}
}

context-free start-symbols
	Start
context-free syntax
	Bool -> K
	Int -> K
	"(" K ")" -> K {bracket}
	DzId -> Id
	"halt" K -> K {cons("K1327Syn")}
	Nat -> K
	Bool -> K
	"if" K "then" K "else" K -> K {cons("K1292Syn")}
	DzInt -> Int
	Int -> K
	"read" -> K {cons("K1332Syn")}
	"print" K -> K {cons("K1333Syn")}
	Int -> K
	Bool -> K
	"me" -> K {cons("K1344Syn")}
	"parent" -> K {cons("K1345Syn")}
	"receive" -> K {cons("K1346Syn")}
	"barrier" -> K {cons("K1350Syn")}
	"haltAgent" -> K {cons("K1353Syn")}
	"newAgent" K -> K {cons("K1343Syn")}
	"receiveFrom" K -> K {cons("K1347Syn")}
	"send" K "to" K -> K {cons("K1348Syn")}
	"sendSynch" K "to" K -> K {cons("K1349Syn")}
	"broadcast" K -> K {cons("K1352Syn")}
	Id -> K
	"(" K ")" -> K {bracket}
	DzLTLFormula -> LTLFormula
	DzFloat -> Float
	DzString -> String
	"while" K "do" K -> K {cons("K1337Syn")}
	"cc" "(" K ")" -> K {cons("K1325Syn")}
	"callcc" K -> K {cons("K1324Syn")}
	"mu" Id "." K -> K {cons("K1323Syn")}
	"skip" -> K {cons("K1328Syn")}
	K ";" K -> K {left, cons("K1329Syn")}
	DzBool -> Bool
	"quote" K -> K {cons("K1354Syn")}
	"unquote" K -> K {cons("K1355Syn")}
	"lift" K -> K {cons("K1356Syn")}
	"eval" K -> K {cons("K1357Syn")}
	Nat -> K
	DzModelCheckerState -> ModelCheckerState
	DzProp -> Prop
	DzModelCheckResult -> ModelCheckResult
	Prop -> LTLFormula
	Id -> InsertDzId

%% start symbols
	Float		-> Start
	Bool		-> Start
	LTLFormula		-> Start
	Prop		-> Start
	String		-> Start
	ModelCheckResult		-> Start
	Id		-> Start
	Int		-> Start
	ModelCheckerState		-> Start
	K		-> Start


	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzBool	-> DzBool	{cons("DzBool1Const")}
	DzDzId		-> DzId		{cons("DzId1Const")}
	DzDzString	-> DzString	{cons("DzString1Const")}

	DzDzINT		-> DzDzInt
	DzDzID		-> DzDzId
	DzDzBOOL	-> DzDzBool
	DzDzSTRING	-> DzDzString

lexical syntax


	"to" -> DzDzID {reject}
	"send" -> DzDzID {reject}
	"broadcast" -> DzDzID {reject}
	"newAgent" -> DzDzID {reject}
	"skip" -> DzDzID {reject}
	"while" -> DzDzID {reject}
	"barrier" -> DzDzID {reject}
	"spawn" -> DzDzID {reject}
	"unquote" -> DzDzID {reject}
	"quote" -> DzDzID {reject}
	"if" -> DzDzID {reject}
	"read" -> DzDzID {reject}
	"me" -> DzDzID {reject}
	"do" -> DzDzID {reject}
	"haltAgent" -> DzDzID {reject}
	"receive" -> DzDzID {reject}
	"sendSynch" -> DzDzID {reject}
	"rendezvous" -> DzDzID {reject}
	"acquire" -> DzDzID {reject}
	"else" -> DzDzID {reject}
	"eval" -> DzDzID {reject}
	"parent" -> DzDzID {reject}
	"mu" -> DzDzID {reject}
	"print" -> DzDzID {reject}
	"and" -> DzDzID {reject}
	"not" -> DzDzID {reject}
	"ref" -> DzDzID {reject}
	"then" -> DzDzID {reject}
	"lift" -> DzDzID {reject}
	"receiveFrom" -> DzDzID {reject}
	"halt" -> DzDzID {reject}
	"release" -> DzDzID {reject}
	"cc" -> DzDzID {reject}
	"callcc" -> DzDzID {reject}

lexical restrictions
	%% follow restrictions
	"receive" -/- [F].[r].[o].[m]
	"send" -/- [S].[y].[n].[c].[h]
	"halt" -/- [A].[g].[e].[n].[t]

