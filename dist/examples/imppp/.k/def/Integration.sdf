module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

exports

context-free syntax
context-free priorities
{
	"notBool" Bool -> Bool {left, cons("Bool10Syn")}
} > {
	Bool "andBool" Bool -> Bool {left, cons("Bool1AndBoolSyn")}
	K "andThenBool" K -> Bool {left, cons("Bool12Syn")}
} > {
	Bool "xorBool" Bool -> Bool {left, cons("Bool13Syn")}
} > {
	Bool "orBool" Bool -> Bool {left, cons("Bool14Syn")}
	K "orElseBool" K -> Bool {left, cons("Bool15Syn")}
} > {
	Bool "impliesBool" Bool -> Bool {left, cons("Bool16Syn")}
} > { left:
	Bool "==Bool" Bool -> Bool {left, cons("Bool17Syn")}
	Bool "=/=Bool" Bool -> Bool {left, cons("Bool18Syn")}
}

context-free priorities
{ left:
	Int "*Int" Int -> Int {left, cons("Int19Syn")}
	Int "/Int" Int -> Int {left, cons("Int120Syn")}
	Int "%Int" Int -> Int {left, cons("Int122Syn")}
} > { left:
	Int "+Int" Int -> Int {left, cons("Int123Syn")}
	Int "-Int" Int -> Int {left, cons("Int124Syn")}
}

context-free priorities
{ left:
	Float "*Float" Float -> Float {left, cons("Float135Syn")}
	Float "/Float" Float -> Float {left, cons("Float136Syn")}
	Float "%Float" Float -> Float {left, cons("Float137Syn")}
} > { left:
	Float "+Float" Float -> Float {left, cons("Float138Syn")}
	Float "-Float" Float -> Float {left, cons("Float139Syn")}
}

context-free priorities
{ left:
	Float "<=Float" Float -> Bool {left, cons("Bool140Syn")}
	Float "<Float" Float -> Bool {left, cons("Bool142Syn")}
	Float ">=Float" Float -> Bool {left, cons("Bool143Syn")}
	Float ">Float" Float -> Bool {left, cons("Bool144Syn")}
	Float "==Float" Float -> Bool {left, cons("Bool145Syn")}
	Float "=/=Float" Float -> Bool {left, cons("Bool146Syn")}
}

context-free priorities
{ left:
	K "==K" K -> Bool {cons("Bool1EqEqKSyn")}
	K "=/=K" K -> Bool {cons("Bool168Syn")}
}

context-free priorities
{
	AExp "/" AExp -> AExp {left, cons("AExp1284Syn")}
} > {
	AExp "+" AExp -> AExp {left, cons("AExp1285Syn")}
}

context-free priorities
{
	AExp "<=" AExp -> BExp {cons("BExp1286Syn")}
} > {
	"not" BExp -> BExp {cons("BExp1287Syn")}
} > {
	BExp "and" BExp -> BExp {cons("BExp1288Syn")}
}

context-free priorities
{
	"var" Ids -> Stmt {cons("Stmt1290Syn")}
} > {
	Id ":=" AExp -> Stmt {cons("Stmt1294Syn")}
} > {
	"if" InsertDzBExp "then" InsertDzStmt "else" Stmt -> Stmt {cons("Stmt1295Syn")}
	"while" InsertDzBExp "do" Stmt -> Stmt {cons("Stmt1296Syn")}
} > {
	"spawn" Stmt -> Stmt {cons("Stmt1297Syn")}
} > {
	Stmt ";" Stmt -> Stmt {left, cons("Stmt1298Syn")}
}

%% subsorts 1
context-free priorities
{
	Bool -> K
	DzId -> K
	ModelCheckResult -> K
	KResult -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	DzInt -> K
	BExp -> K
	Prop -> K
	DzModelCheckerState -> K
	DzLTLFormula -> K
	Ids -> K
	Int -> K
	DzModelCheckResult -> K
	DzBool -> K
	DzProp -> K
	ModelCheckerState -> K
	Float -> K
	Nat -> K
	AExps -> K
	Char -> K
	LTLFormula -> K
	AExp -> K
	String -> K
	Stmt -> K
	Printable -> K
	Id -> K
} > {
	String -> TCPAnswer
	Int -> KResult
	Bool -> BExp
	DzFloat -> Float
	DzLTLFormula -> LTLFormula
	DzModelCheckResult -> ModelCheckResult
	DzBool -> Bool
	Id -> AExp
	DzModelCheckerState -> ModelCheckerState
	AExp -> AExps
	String -> AExp
	DzId -> Id
	Int -> AExp
	Bool -> KResult
	String -> KResult
	DzString -> String
	DzInt -> Int
	DzProp -> Prop
	Id -> Ids
	Prop -> LTLFormula
	String -> Printable
	Int -> Printable
} > {
	K -> Bool
	K -> DzId
	K -> ModelCheckResult
	K -> KResult
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> DzInt
	K -> BExp
	K -> Prop
	K -> DzModelCheckerState
	K -> DzLTLFormula
	K -> Ids
	K -> Int
	K -> DzModelCheckResult
	K -> DzBool
	K -> DzProp
	K -> ModelCheckerState
	K -> Float
	K -> Nat
	K -> AExps
	K -> Char
	K -> LTLFormula
	K -> AExp
	K -> String
	K -> Stmt
	K -> Printable
	K -> Id
}

%% subsorts 2
context-free priorities
{
	K -> Bool
} .> {
	Bool -> K
	DzBool -> K
}

context-free priorities
{
	K -> DzId
} .> {
	DzId -> K
}

context-free priorities
{
	K -> ModelCheckResult
} .> {
	ModelCheckResult -> K
	DzModelCheckResult -> K
}

context-free priorities
{
	K -> KResult
} .> {
	Bool -> K
	KResult -> K
	DzString -> K
	DzInt -> K
	Int -> K
	DzBool -> K
	String -> K
}

context-free priorities
{
	K -> DzFloat
} .> {
	DzFloat -> K
}

context-free priorities
{
	K -> TCPAnswer
} .> {
	TCPAnswer -> K
	DzString -> K
	String -> K
}

context-free priorities
{
	K -> DzString
} .> {
	DzString -> K
}

context-free priorities
{
	K -> DzInt
} .> {
	DzInt -> K
}

context-free priorities
{
	K -> BExp
} .> {
	Bool -> K
	BExp -> K
	DzBool -> K
}

context-free priorities
{
	K -> Prop
} .> {
	Prop -> K
	DzProp -> K
}

context-free priorities
{
	K -> DzModelCheckerState
} .> {
	DzModelCheckerState -> K
}

context-free priorities
{
	K -> DzLTLFormula
} .> {
	DzLTLFormula -> K
}

context-free priorities
{
	K -> Ids
} .> {
	DzId -> K
	Ids -> K
	Id -> K
}

context-free priorities
{
	K -> Int
} .> {
	DzInt -> K
	Int -> K
}

context-free priorities
{
	K -> DzModelCheckResult
} .> {
	DzModelCheckResult -> K
}

context-free priorities
{
	K -> DzBool
} .> {
	DzBool -> K
}

context-free priorities
{
	K -> DzProp
} .> {
	DzProp -> K
}

context-free priorities
{
	K -> ModelCheckerState
} .> {
	DzModelCheckerState -> K
	ModelCheckerState -> K
}

context-free priorities
{
	K -> Float
} .> {
	DzFloat -> K
	Float -> K
}

context-free priorities
{
	K -> Nat
} .> {
	Nat -> K
}

context-free priorities
{
	K -> AExps
} .> {
	DzId -> K
	DzString -> K
	DzInt -> K
	Int -> K
	AExps -> K
	AExp -> K
	String -> K
	Id -> K
}

context-free priorities
{
	K -> Char
} .> {
	Char -> K
}

context-free priorities
{
	K -> LTLFormula
} .> {
	Prop -> K
	DzLTLFormula -> K
	DzProp -> K
	LTLFormula -> K
}

context-free priorities
{
	K -> AExp
} .> {
	DzId -> K
	DzString -> K
	DzInt -> K
	Int -> K
	AExp -> K
	String -> K
	Id -> K
}

context-free priorities
{
	K -> String
} .> {
	DzString -> K
	String -> K
}

context-free priorities
{
	K -> Stmt
} .> {
	Stmt -> K
}

context-free priorities
{
	K -> Printable
} .> {
	DzString -> K
	DzInt -> K
	Int -> K
	String -> K
	Printable -> K
}

context-free priorities
{
	K -> Id
} .> {
	DzId -> K
	Id -> K
}

context-free syntax
	DzBool -> Bool
	DzInt -> Int
	Int "<=Int" Int -> Bool {left, cons("Bool125Syn")}
	Int "<Int" Int -> Bool {left, cons("Bool126Syn")}
	Int ">=Int" Int -> Bool {left, cons("Bool127Syn")}
	Int ">Int" Int -> Bool {left, cons("Bool128Syn")}
	Int "==Int" Int -> Bool {left, cons("Bool129Syn")}
	Int "=/=Int" Int -> Bool {left, cons("Bool130Syn")}
	"dummyNat" -> Nat {cons("Nat132Syn")}
	"isNat" "(" Int ")" -> Bool {cons("Bool133Syn")}
	Int "dividesInt" Int -> Bool {cons("Bool134Syn")}
	DzFloat -> Float
	"Int2Float" "(" Int ")" -> Float {cons("Float147Syn")}
	"Float2Int" "(" Float ")" -> Int {cons("Int148Syn")}
	DzId -> Id
	DzString -> String
	String "+String" String -> String {left, cons("String149Syn")}
	String "==String" String -> Bool {left, cons("Bool150Syn")}
	"lengthString" "(" String ")" -> Int {cons("Int152Syn")}
	"charString" "(" Int ")" -> String {cons("String153Syn")}
	"asciiString" "(" String ")" -> Int {cons("Int154Syn")}
	"substrString" "(" String "," Int "," Int ")" -> String {cons("String155Syn")}
	"Float2String" "(" Float ")" -> String {cons("String156Syn")}
	"String2Float" "(" String ")" -> Float {cons("Float157Syn")}
	"String2Int" "(" String ")" -> Int {cons("Int158Syn")}
	"Int2String" "(" Int ")" -> String {cons("String159Syn")}
	"Id2String" "(" Id ")" -> String {cons("String160Syn")}
	"String2Id" "(" String ")" -> Id {cons("Id162Syn")}
	String "=/=String" String -> Bool {left, cons("Bool163Syn")}
	"dummyChar" -> Char {cons("Char164Syn")}
	"isChar" "(" String ")" -> Bool {cons("Bool165Syn")}
	"#isWhiteSpace" "(" Char ")" -> Bool {cons("Bool166Syn")}
	"#isDigit" "(" Char ")" -> Bool {cons("Bool167Syn")}
	"#if" Bool "#then" K "#else" K "#fi" -> K {cons("K169Syn")}
	Set "<=Set" Set -> Bool {cons("Bool170Syn")}
	Set "==Set" Set -> Bool {cons("Bool172Syn")}
	Set "=/=Set" Set -> Bool {cons("Bool173Syn")}
	Map "<=Map" Map -> Bool {cons("Bool174Syn")}
	Map "==Map" Map -> Bool {cons("Bool175Syn")}
	Map "=/=Map" Map -> Bool {cons("Bool176Syn")}
	ListDlKDr "==List{K}" ListDlKDr -> Bool {cons("Bool177Syn")}
	ListDlKDr "=/=List{K}" ListDlKDr -> Bool {cons("Bool178Syn")}
	KLabel "==KLabel" KLabel -> Bool {cons("Bool179Syn")}
	"#EOF" -> TCPAnswer {cons("TCPAnswer180Syn")}
	String -> TCPAnswer
	"#tcpError" "(" String ")" -> TCPAnswer {cons("TCPAnswer182Syn")}
	"#tcpRequest" "(" String ")" -> TCPAnswer {cons("TCPAnswer183Syn")}
	"#checkTCPAnswer" "(" String ")" -> TCPAnswer {cons("TCPAnswer184Syn")}
	"##tcpRequest" "(" String ")" -> String {cons("String185Syn")}
	"#retrieveTCPError" "(" String ")" -> String {cons("String186Syn")}
	"#isTCPError" "(" String ")" -> Bool {cons("Bool187Syn")}
	"randomRandom" "(" Int ")" -> Int {cons("Int188Syn")}
	DzLTLFormula -> LTLFormula
	"LTL~" LTLFormula -> LTLFormula {cons("LTLFormula189Syn")}
	LTLFormula "LTL/\\" LTLFormula -> LTLFormula {cons("LTLFormula190Syn")}
	LTLFormula "LTL\\/" LTLFormula -> LTLFormula {cons("LTLFormula192Syn")}
	"LTLO" LTLFormula -> LTLFormula {cons("LTLFormula193Syn")}
	LTLFormula "LTLU" LTLFormula -> LTLFormula {cons("LTLFormula194Syn")}
	LTLFormula "LTLR" LTLFormula -> LTLFormula {cons("LTLFormula195Syn")}
	LTLFormula "LTL->" LTLFormula -> LTLFormula {cons("LTLFormula196Syn")}
	LTLFormula "LTL<->" LTLFormula -> LTLFormula {cons("LTLFormula197Syn")}
	"LTL<>" LTLFormula -> LTLFormula {cons("LTLFormula198Syn")}
	"LTL[]" LTLFormula -> LTLFormula {cons("LTLFormula199Syn")}
	LTLFormula "LTLW" LTLFormula -> LTLFormula {cons("LTLFormula1200Syn")}
	LTLFormula "LTL|->" LTLFormula -> LTLFormula {cons("LTLFormula1202Syn")}
	LTLFormula "LTL=>" LTLFormula -> LTLFormula {cons("LTLFormula1203Syn")}
	LTLFormula "LTL<=>" LTLFormula -> LTLFormula {cons("LTLFormula1204Syn")}
	DzModelCheckerState -> ModelCheckerState
	DzProp -> Prop
	DzModelCheckResult -> ModelCheckResult
	Prop -> LTLFormula
	"modelCheck" "(" ModelCheckerState "," LTLFormula ")" -> ModelCheckResult {cons("ModelCheckResult1205Syn")}
	K "inList{K}" ListDlKDr -> Bool {cons("Bool1206Builtin")}
	Map "(" K ")" -> K {cons("K1207Builtin")}
	Map "[" Map "]" -> Map {cons("Map1208Builtin")}
	Map "[" ListDlKDr "/" ListDlKDr "]" -> Map {cons("Map1209Builtin")}
	Map "[" "undef" "/" ListDlKDr "]" -> Map {cons("Map1220Builtin")}
	Map "(" ListDlKDr ")" -> ListDlKDr {cons("ListDlKDr1222Builtin")}
	"keys" Map -> Set {cons("Set1223Builtin")}
	"$hasMapping" "(" Map "," K ")" -> DzBool {cons("DzBool1224Builtin")}
	"Set" ListDlKDr -> Set {cons("Set1225Builtin")}
	Set "-Set" Set -> Set {cons("Set1226Builtin")}
	K "in" Set -> Bool {cons("Bool1227Builtin")}
	SetItem "in" Set -> Bool {cons("Bool1228Builtin")}
	"Bag" ListDlKDr -> Bag {cons("Bag1229Builtin")}
	Bag "-Bag" Bag -> Bag {cons("Bag1230Builtin")}
	K "in" Bag -> Bool {cons("Bool1232Builtin")}
	BagItem "in" Bag -> Bool {cons("Bool1233Builtin")}
	"List" ListDlKDr -> List {cons("List1234Builtin")}
	"lengthList" List -> Int {cons("Int1235Builtin")}
	KResult -> K
	"wklabel" KLabel -> KLabel {cons("KLabel1236Builtin")}
	"wcelllabel" CellLabel -> KLabel {cons("KLabel1237Builtin")}
	"kList" String -> KLabel {cons("KLabel1238Builtin")}
	"wbag" Bag -> KLabel {cons("KLabel1239Builtin")}
	"wset" Set -> KLabel {cons("KLabel1240Builtin")}
	"wlist" List -> KLabel {cons("KLabel1242Builtin")}
	"wmap" Map -> KLabel {cons("KLabel1243Builtin")}
	"getKLabel" K -> KLabel {cons("KLabel1245Builtin")}
	DzModelCheckerState "LTL|=" DzProp -> DzBool {cons("DzBool1246Builtin")}
	String -> K
	Int -> K
	Float -> K
	"#open" "(" String ")" -> K {cons("K1247Syn")}
	"#reopen" "(" Int "," String ")" -> K {cons("K1248Syn")}
	"#close" "(" Int ")" -> K {cons("K1249Syn")}
	"#fEof" "(" Int ")" -> K {cons("K1250Syn")}
	"#tell" "(" Int ")" -> K {cons("K1252Syn")}
	"#seek" "(" Int "," Int ")" -> K {cons("K1253Syn")}
	"#fPeekByte" "(" Int ")" -> K {cons("K1254Syn")}
	"String2Bool" "(" String ")" -> K {cons("K1255Syn")}
	"#ioError" "(" String ")" -> K {cons("K1256Syn")}
	"#fPutByte" "(" Int "," Int ")" -> K {cons("K1257Syn")}
	"#flush" "(" Int ")" -> K {cons("K1258Syn")}
	"#fReadByte" "(" Int ")" -> K {cons("K1259Syn")}
	"String2DotK" "(" String ")" -> K {cons("K1260Syn")}
	"#stdin" -> Int {cons("Int1262Syn")}
	"#stdout" -> Int {cons("Int1263Syn")}
	"#stderr" -> Int {cons("Int1264Syn")}
	"#readByte" "(" ")" -> K {cons("K1265Syn")}
	"#peekByte" "(" ")" -> K {cons("K1266Syn")}
	"#putByte" "(" Int ")" -> K {cons("K1267Syn")}
	"#eof" "(" ")" -> K {cons("K1268Syn")}
	"#string2Int" "(" K ")" -> K {cons("K1269Syn")}
	"#readChar" "(" ")" -> K {cons("K1270Syn")}
	"#fReadChar" "(" Int ")" -> K {cons("K1272Syn")}
	"#charString" "(" K ")" -> K {cons("K1273Syn")}
	"#printChar" "(" K ")" -> K {cons("K1274Syn")}
	"#fPrintChar" "(" Int "," K ")" -> K {cons("K1275Syn")}
	"#removeCharUponAck" -> List {cons("List1276Syn")}
	"#parse" "(" String "," K ")" -> List {cons("List1277Syn")}
	"#convertToken" "(" String "," String ")" -> List {cons("List1278Syn")}
	"#buffer" "(" K ")" -> List {cons("List1279Syn")}
	"#istream" "(" Int ")" -> List {cons("List1280Syn")}
	"#ostream" "(" Int ")" -> List {cons("List1282Syn")}
	"#noIO" -> List {cons("List1283Syn")}
	Id -> AExp
	Int -> AExp
	Bool -> BExp
	"skip" -> Stmt {cons("Stmt1289Syn")}
	"print" "(" AExps ")" -> Stmt {cons("Stmt1292Syn")}
	"halt" -> Stmt {cons("Stmt1293Syn")}
	"{" "}" -> Stmt {cons("Stmt1299Syn")}
	"{" Stmt "}" -> Stmt {cons("Stmt1300Syn")}
	Id -> Ids
	".Ids" -> Ids {cons("Ids1Empty")}
	Ids "," Ids -> Ids {right, cons("Ids1ListSyn")}
	String -> AExp
	"read" "(" ")" -> AExp {cons("AExp1303Syn")}
	"++" Id -> AExp {cons("AExp1302Syn")}
	AExp -> AExps
	".AExps" -> AExps {cons("AExps1Empty")}
	AExps "," AExps -> AExps {right, cons("AExps1ListSyn")}
	Int -> KResult
	Bool -> KResult
	String -> KResult
	Int -> Printable
	String -> Printable
	"env" "(" Map ")" -> K {cons("K1304Syn")}
	BExp -> InsertDzBExp
	Stmt -> InsertDzStmt


	VARID  ":" "Bool"        -> VariableDz            {cons("Bool12Var")}
	VARID  ":" "#Id"        -> VariableDz            {cons("DzId12Var")}
	VARID  ":" "ModelCheckResult"        -> VariableDz            {cons("ModelCheckResult12Var")}
	VARID  ":" "KResult"        -> VariableDz            {cons("KResult12Var")}
	VARID  ":" "#Float"        -> VariableDz            {cons("DzFloat12Var")}
	VARID  ":" "TCPAnswer"        -> VariableDz            {cons("TCPAnswer12Var")}
	VARID  ":" "#String"        -> VariableDz            {cons("DzString12Var")}
	VARID  ":" "#Int"        -> VariableDz            {cons("DzInt12Var")}
	VARID  ":" "BExp"        -> VariableDz            {cons("BExp12Var")}
	VARID  ":" "Prop"        -> VariableDz            {cons("Prop12Var")}
	VARID  ":" "#ModelCheckerState"        -> VariableDz            {cons("DzModelCheckerState12Var")}
	VARID  ":" "#LTLFormula"        -> VariableDz            {cons("DzLTLFormula12Var")}
	VARID  ":" "Ids"        -> VariableDz            {cons("Ids12Var")}
	VARID  ":" "Int"        -> VariableDz            {cons("Int12Var")}
	VARID  ":" "#ModelCheckResult"        -> VariableDz            {cons("DzModelCheckResult12Var")}
	VARID  ":" "#Bool"        -> VariableDz            {cons("DzBool12Var")}
	VARID  ":" "#Prop"        -> VariableDz            {cons("DzProp12Var")}
	VARID  ":" "ModelCheckerState"        -> VariableDz            {cons("ModelCheckerState12Var")}
	VARID  ":" "Float"        -> VariableDz            {cons("Float12Var")}
	VARID  ":" "Nat"        -> VariableDz            {cons("Nat12Var")}
	VARID  ":" "AExps"        -> VariableDz            {cons("AExps12Var")}
	VARID  ":" "Char"        -> VariableDz            {cons("Char12Var")}
	VARID  ":" "LTLFormula"        -> VariableDz            {cons("LTLFormula12Var")}
	VARID  ":" "AExp"        -> VariableDz            {cons("AExp12Var")}
	VARID  ":" "String"        -> VariableDz            {cons("String12Var")}
	VARID  ":" "Stmt"        -> VariableDz            {cons("Stmt12Var")}
	VARID  ":" "Printable"        -> VariableDz            {cons("Printable12Var")}
	VARID  ":" "Id"        -> VariableDz            {cons("Id12Var")}

	"HOLE" ":" "Bool"      -> VariableDz            {cons("Bool12Hole")}
	"HOLE" ":" "#Id"      -> VariableDz            {cons("DzId12Hole")}
	"HOLE" ":" "ModelCheckResult"      -> VariableDz            {cons("ModelCheckResult12Hole")}
	"HOLE" ":" "KResult"      -> VariableDz            {cons("KResult12Hole")}
	"HOLE" ":" "#Float"      -> VariableDz            {cons("DzFloat12Hole")}
	"HOLE" ":" "TCPAnswer"      -> VariableDz            {cons("TCPAnswer12Hole")}
	"HOLE" ":" "#String"      -> VariableDz            {cons("DzString12Hole")}
	"HOLE" ":" "#Int"      -> VariableDz            {cons("DzInt12Hole")}
	"HOLE" ":" "BExp"      -> VariableDz            {cons("BExp12Hole")}
	"HOLE" ":" "Prop"      -> VariableDz            {cons("Prop12Hole")}
	"HOLE" ":" "#ModelCheckerState"      -> VariableDz            {cons("DzModelCheckerState12Hole")}
	"HOLE" ":" "#LTLFormula"      -> VariableDz            {cons("DzLTLFormula12Hole")}
	"HOLE" ":" "Ids"      -> VariableDz            {cons("Ids12Hole")}
	"HOLE" ":" "Int"      -> VariableDz            {cons("Int12Hole")}
	"HOLE" ":" "#ModelCheckResult"      -> VariableDz            {cons("DzModelCheckResult12Hole")}
	"HOLE" ":" "#Bool"      -> VariableDz            {cons("DzBool12Hole")}
	"HOLE" ":" "#Prop"      -> VariableDz            {cons("DzProp12Hole")}
	"HOLE" ":" "ModelCheckerState"      -> VariableDz            {cons("ModelCheckerState12Hole")}
	"HOLE" ":" "Float"      -> VariableDz            {cons("Float12Hole")}
	"HOLE" ":" "Nat"      -> VariableDz            {cons("Nat12Hole")}
	"HOLE" ":" "AExps"      -> VariableDz            {cons("AExps12Hole")}
	"HOLE" ":" "Char"      -> VariableDz            {cons("Char12Hole")}
	"HOLE" ":" "LTLFormula"      -> VariableDz            {cons("LTLFormula12Hole")}
	"HOLE" ":" "AExp"      -> VariableDz            {cons("AExp12Hole")}
	"HOLE" ":" "String"      -> VariableDz            {cons("String12Hole")}
	"HOLE" ":" "Stmt"      -> VariableDz            {cons("Stmt12Hole")}
	"HOLE" ":" "Printable"      -> VariableDz            {cons("Printable12Hole")}
	"HOLE" ":" "Id"      -> VariableDz            {cons("Id12Hole")}

	VariableDz -> K


	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzBool	-> DzBool	{cons("DzBool1Const")}
	DzDzId		-> DzId		{cons("DzId1Const")}
	DzDzString	-> DzString	{cons("DzString1Const")}

	DzDzINT		-> DzDzInt
	DzDzBOOL	-> DzDzBool
	DzDzSTRING	-> DzDzString

context-free restrictions
	VariableDz -/- ~[\:\;\(\)\<\>\~\n\r\t\,\ \[\]\=\+\-\*\/\|\{\}\.]

lexical syntax
	"wrap-with" -> DzKLabel



      %% terminals reject
        "String2Bool" -> VARID {reject}
        "String2Id" -> VARID {reject}
        "Float2Int" -> VARID {reject}
        "Float2String" -> VARID {reject}
        "String2DotK" -> VARID {reject}
        "Set" -> VARID {reject}
        "Id2String" -> VARID {reject}
        "LTLO" -> VARID {reject}
        "LTLR" -> VARID {reject}
        "Int2Float" -> VARID {reject}
        "LTLW" -> VARID {reject}
        "LTLU" -> VARID {reject}
        "String2Int" -> VARID {reject}
        "Int2String" -> VARID {reject}
        "Bag" -> VARID {reject}
        "String2Float" -> VARID {reject}
        "List" -> VARID {reject}

lexical restrictions
	%% follow restrictions
	"<=" -/- [S].[e].[t]
	"and" -/- [T].[h].[e].[n].[B].[o].[o].[l]
	"+" -/- [S].[t].[r].[i].[n].[g]
	"+" -/- [F].[l].[o].[a].[t]
	"not" -/- [B].[o].[o].[l]
	"/" -/- [I].[n].[t]
	"<=" -/- [I].[n].[t]
	"<=" -/- [M].[a].[p]
	"and" -/- [B].[o].[o].[l]
	"/" -/- [F].[l].[o].[a].[t]
	"+" -/- [I].[n].[t]
	"==K" -/- [L].[a].[b].[e].[l]
	"<=" -/- [F].[l].[o].[a].[t]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
	DzDzId  -/- [a-zA-Z0-9]
	DzDzInt -/- [0-9]

