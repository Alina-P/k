module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
	AExp "/" AExp -> AExp {left, cons("AExp1284Syn")}
} > {
	AExp "+" AExp -> AExp {left, cons("AExp1285Syn")}
}

context-free priorities
{
	AExp "<=" AExp -> BExp {cons("BExp1286Syn")}
	"not" BExp -> BExp {cons("BExp1287Syn")}
} > {
	BExp "and" BExp -> BExp {left, cons("BExp1288Syn")}
}

context-free priorities
{
	Id ":=" AExp -> Stmt {cons("Stmt1290Syn")}
	"if" InsertDzBExp "then" InsertDzStmt "else" Stmt -> Stmt {cons("Stmt1292Syn")}
	"while" InsertDzBExp "do" Stmt -> Stmt {cons("Stmt1293Syn")}
} > {
	Stmt ";" Stmt -> Stmt {left, cons("Stmt1294Syn")}
}

context-free start-symbols
	Start
context-free syntax
	DzBool -> Bool
	DzString -> String
	DzInt -> Int
	DzLTLFormula -> LTLFormula
	DzModelCheckerState -> ModelCheckerState
	DzProp -> Prop
	DzModelCheckResult -> ModelCheckResult
	Prop -> LTLFormula
	DzFloat -> Float
	Int -> AExp
	Id -> AExp
	"(" AExp ")" -> AExp {bracket}
	Bool -> BExp
	"(" BExp ")" -> BExp {bracket}
	"skip" -> Stmt {cons("Stmt1289Syn")}
	"(" Stmt ")" -> Stmt {bracket}
	"var" Ids ";" Stmt -> Pgm {cons("Pgm1295Syn")}
	{Id ","}* -> Ids {cons("Ids1ListSyn")}
	Pgm -> Start
	DzId -> Id
	BExp -> InsertDzBExp
	Stmt -> InsertDzStmt

%% start symbols


	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzBool	-> DzBool	{cons("DzBool1Const")}
	DzDzId		-> DzId		{cons("DzId1Const")}
	DzDzString	-> DzString	{cons("DzString1Const")}

	DzDzINT		-> DzDzInt
	DzDzID		-> DzDzId
	DzDzBOOL	-> DzDzBool
	DzDzSTRING	-> DzDzString

lexical syntax


	"else" -> DzDzID {reject}
	"var" -> DzDzID {reject}
	"skip" -> DzDzID {reject}
	"and" -> DzDzID {reject}
	"while" -> DzDzID {reject}
	"not" -> DzDzID {reject}
	"if" -> DzDzID {reject}
	"then" -> DzDzID {reject}
	"do" -> DzDzID {reject}

lexical restrictions
	%% follow restrictions

