package org.kframework.ktest2.CmdArgs;


import org.apache.commons.cli.CommandLine;
import org.apache.commons.io.FilenameUtils;
import org.kframework.ktest2.KTestStep;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Represents valid command line arguments. This class can only be instantiated using
 * `validateArgs' method, which ensures validation of arguments.
 *
 * Being valid means:
 *   - File paths are valid(e.g. point to a files/directories) relative to current directory
 *   - Only one unnamed argument is passed
 *           (TODO: what happens in case of `--verbose something' ? (osa1))
 *   - File extension is either .k or .xml
 *
 * Wrong strings in --skip parameters are ignored for now. (TODO: osa1)
 */
public class CmdArg {

    /**
     * A root directory where K definitions reside. By default this is the current directory.
     * Valid only in batch mode.
     */
    public final String directory;

    /**
     * Programs directory in single job mode, or a root directory for programs in batch mode. By
     * default this is the directory where <file> reside.
     */
    public final String programs;

    /**
     * Directory containing input and expected output for programs in single job mode,
     * or a root directory for the expected I/O for programs in batch mode. By default this is
     * the directory where <file> reside.
     */
    public final String results;

    /**
     * The list of program extensions separated by whitespaces. Required in single job mode,
     * invalid in batch mode.
     */
    public final String[] extensions;

    /**
     * The list of programs which will not be tested. Valid only in single job mode.
     */
    public final String[] excludes;

    /**
     * The list of steps separated by whitespace to be skipped.
     */
    public final KTestStep[] skips;

    /**
     * Generate a junit-like report.
     */
    public final boolean generateReport;

    /**
     * Config XML file for batch mode, K definition for single job mode.
     */
    public final String targetFile;

    /**
     * Enable verbose output.
     */
    public final boolean verbose;

    /**
     * Timeout for processes spawned by ktest. (in seconds)
     */
    public final int timeout;

    private CmdArg(String directory, String programs, String results, String[] extensions,
                   String[] excludes, KTestStep[] skips, boolean generateReport,
                   String targetFile, boolean verbose, int timeout) {
        this.directory = directory;
        this.programs = programs;
        this.results = results;
        this.extensions = extensions;
        this.excludes = excludes;
        this.skips = skips;
        this.generateReport = generateReport;
        this.targetFile = targetFile;
        this.verbose = verbose;
        this.timeout = timeout;
    }

    /**
     * Validate raw data parsed from command line arguments and return CmdArg objects,
     * which is needed for TestSuite to run tests.
     * @param cmdOpts CommandLine object generated by command line argument parser
     * @return validated CmdArg object that is needed by TestSuite
     * @throws InvalidArgumentException in case of an invalid argument
     */
    public static CmdArg validateArgs(CommandLine cmdOpts) throws InvalidArgumentException {
        String[] args = cmdOpts.getArgs();

        if (args.length != 1)
            throw new InvalidArgumentException("ktest requires exactly one <file> parameter.");

        String targetFile = args[0];
        if (!new File(targetFile).isFile())
            throw new InvalidArgumentException("target file argument is not a valid file: " +
                    targetFile);

        String ext = FilenameUtils.getExtension(targetFile);
        if (!ext.equals("xml") && !ext.equals("k"))
            throw new InvalidArgumentException("target file format is not valid: " + ext +
                    "(should be .xml or .k)");

        String directory = getDirectoryArg(cmdOpts, Constants.DIRECTORY_OPTION,
                System.getProperty("user.dir"));
        String programs = getDirectoryArg(cmdOpts, Constants.PROGRAMS_OPTION,
                System.getProperty("user.dir"));
        String results = getDirectoryArg(cmdOpts, Constants.RESULTS_OPTION,
                System.getProperty("user.dir"));

        String[] extensions = cmdOpts.getOptionValue(Constants.EXTENSIONS_OPTION, "").split("\\s+");
        String[] excludes = cmdOpts.getOptionValue(Constants.EXCLUDE_OPTION, "").split("\\s+");

        boolean generateReport = cmdOpts.hasOption(Constants.REPORT_OPTION);

        boolean verbose = cmdOpts.hasOption(Constants.VERBOSE_OPTION);

        String timeout_str = cmdOpts.getOptionValue(Constants.TIMEOUT_OPTION, "5000");
        int timeout;
        try {
            timeout = Integer.parseInt(timeout_str);
        } catch (NumberFormatException e) {
            throw new InvalidArgumentException("timeout value is not an integer: " + timeout_str);
        }

        return new CmdArg(directory, programs, results, extensions, excludes, getSkips(cmdOpts),
                generateReport, targetFile, verbose, timeout);
    }

    private static KTestStep[] getSkips(CommandLine cmdOpts) {
        final String[] skips_str = cmdOpts.getOptionValue(Constants.SKIP_OPTION, "").split("\\s+");
        Arrays.sort(skips_str); // needed for binary search
        ArrayList<KTestStep> skips = new ArrayList<>();
        if (Arrays.binarySearch(skips_str, "kompile") >= 0)
            skips.add(KTestStep.KOMPILE);
        if (Arrays.binarySearch(skips_str, "pdf") >= 0)
            skips.add(KTestStep.PDF);
        if (Arrays.binarySearch(skips_str, "krun") >= 0)
            skips.add(KTestStep.KRUN);
        return skips.toArray(new KTestStep[skips.size()]);
    }

    private static String getDirectoryArg(CommandLine cmdOpts, String argName,
                                          String default_) throws
            InvalidArgumentException {
        final String ret = cmdOpts.getOptionValue(argName, default_);
        if (!new File(ret).isDirectory())
            throw new InvalidArgumentException("--" + argName + " argument is not a folder: " +
                    ret);
        return ret;
    }
}

